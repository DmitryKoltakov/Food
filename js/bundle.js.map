{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./js/modules/calc.js","webpack:///./js/modules/cards.js","webpack:///./js/modules/forms.js","webpack:///./js/modules/modal.js","webpack:///./js/modules/slider.js","webpack:///./js/modules/tabs.js","webpack:///./js/modules/timer.js","webpack:///./js/script.js","webpack:///./js/services/services.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;;AAEjB;;AAEA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;;AAEe,mEAAI,E;;;;;;;;;;;;AC9GnB;AAAA;AAAiD;;AAEjD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+B;AACA;;AAEA;AACA,oD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA,2BAA2B,SAAS,OAAO,SAAS;AACpD,kDAAkD,WAAW;AAC7D,gDAAgD,WAAW;AAC3D;AACA;AACA;AACA,0DAA0D,WAAW;AACrE;AACA;AACA;AACA;AACA;;AAEA,IAAI,sEAAW;AACf;AACA,2BAA2B,iCAAiC;AAC5D;AACA,aAAa;AACb,SAAS;;AAET;;AAEe,oEAAK,E;;;;;;;;;;;;ACvDpB;AAAA;AAAA;AAA8C;AAC9C;AACA;AACA;;AAE8C;;AAE9C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,YAAY,mEAAQ;AACpB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;;AAEA;AACA,QAAQ,wDAAS;;AAEjB;AACA;AACA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yDAAU;AACtB,SAAS;AACT;AACA;;AAEe,oEAAK,E;;;;;;;;;;;;AC1EpB;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,sBAAsB;AACtB;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,kFAAkF;AAClF,KAAK;;;AAGL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,sE;AACA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,oEAAK,EAAC;AACD;;;;;;;;;;;;;ACrDpB;AAAA,iBAAiB,sFAAsF;AACvG;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,cAAc;AAC9C,mCAAmC,WAAW;AAC9C,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;;AAEA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT,6C;AACA;;AAEA,qDAAqD,OAAO;;AAE5D;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,uCAAuC,WAAW;AAClD,SAAS;AACT;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,qDAAqD,OAAO;;AAE5D;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,uCAAuC,WAAW;AAClD,SAAS;AACT;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA,yDAAyD,OAAO;;AAEhE;AACA,2CAA2C,WAAW;AACtD,aAAa;AACb;AACA;;AAEA;AACA;AACA,SAAS;AACT,KAAK;;AAEL;AACA;AACA;AACA;;AAEe,qEAAM,E;;;;;;;;;;;;ACzJrB;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;;AAEe,mEAAI,E;;;;;;;;;;;;ACzCnB;AAAA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mC;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEe,oEAAK,E;;;;;;;;;;;;ACxDpB;AAAA;AAAA;AAA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A;AACA,mCAAmC;AACnC;AACA;;AAEA;AACA,kBAAkB;AAClB,2CAA2C;AAC3C;AACA;;;AAGA,kDAAkD;AAClD;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,iCAAiC,UAAU,SAAS,aAAa;AACjE;AACA;;AAEA;;AAEA;AACA;;AAEA,uCAAuC;AACvC;AACA,gCAAgC;AAChC,kCAAkC;;;;;;;AAOlC;;;AAGA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oCAAoC,SAAS,aAAa,SAAS;AACnE,uDAAuD,cAAc;AACrE,+CAA+C,iBAAiB;AAChE;AACA;AACA;AACA,yDAAyD,WAAW;AACpE;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;;;AAIA;AACA;;AAEA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE,8BAA8B;AAC9B,8BAA8B;AAC9B;;AAEA,sBAAsB;AACtB,mD;AACA;;AAEA,iBAAiB;AACjB,yDAAyD;AACzD;AACA;AACA,8BAA8B,SAAS,OAAO,SAAS;AACvD,qDAAqD,WAAW;AAChE,mDAAmD,WAAW;AAC9D;AACA;AACA;AACA,6DAA6D,WAAW;AACxE;AACA;AACA,aAAa;AACb,uCAAuC;AACvC;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAWA;;;;;AAKA;AACA;;AAEA,wCAAwC;AACxC;AACA;AACA,wDAAwD;;;AAGxD;AACA,0BAA0B;AAC1B;AACA;;AAEA,sBAAsB;AACtB,mBAAmB;;AAEnB,0CAA0C;AAC1C;AACA;;AAEA,mBAAmB;;AAEnB;;AAEA;AACA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8B;AACA;;AAEA;AACA,mD;AACA;;AAEA;AACA,yDAAyD;AACzD,yCAAyC;AACzC,2CAA2C;AAC3C,mDAAmD;AACnD,YAAY,MAAM;AAClB;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,SAAS,OAAO,SAAS;AACnD,iDAAiD,WAAW;AAC5D,+CAA+C,WAAW;AAC1D;AACA;AACA;AACA,yDAAyD,WAAW;AACpE;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;AAKA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA,wCAAwC,QAAQ,mCAAmC;;;AAGnF;AACA,oDAAoD,QAAQ,oCAAoC;;AAEhG;;AAEA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,qDAAqD;AACrD;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA,4CAA4C;AAC5C;AACA,8CAA8C;AAC9C;AACA,kEAAkE,iBAAiB;AACnF,sBAAsB;;;AAGtB;AACA,sDAAsD;AACtD,8DAA8D;AAC9D,yCAAyC;AACzC,qDAAqD;AACrD,4EAA4E;AAC5E,QAAQ;AACR,kDAAkD;AAClD;AACA,IAAI;;AAEJ;AACA;AACA;AACA;;;AAGA;AACA,+CAA+C;AAC/C,wCAAwC;AACxC,6CAA6C;AAC7C,yDAAyD;AACzD,gFAAgF;AAChF,YAAY;AACZ;AACA;AACA,QAAQ;;AAER,IAAI;;;;;;AAMJ;;;AAGA;;;AAGA;AACA,mDAAmD;AACnD,oBAAoB;AACpB;AACA;AACA;AACA;;AAEA,0BAA0B;AAC1B,sBAAsB;AACtB,IAAI;;AAEJ,4BAA4B;AAC5B,+CAA+C;AAC/C,8BAA8B;;AAE9B,6DAA6D;AAC7D,iDAAiD;AACjD;AACA,2CAA2C;;AAE3C,gDAAgD;AAChD,8CAA8C;AAC9C,sEAAsE,iBAAiB;AACvF;AACA;AACA,+CAA+C;AAC/C;;;;AAIA,6BAA6B;AAC7B;AACA;AACA,YAAY;AACZ,+CAA+C;;AAE/C,8BAA8B;AAC9B;;;;AAIA,mDAAmD;AACnD,4CAA4C;AAC5C,iDAAiD;AACjD,+DAA+D;AAC/D,gCAAgC;AAChC,qCAAqC;AACrC;AACA,oBAAoB;AACpB,gBAAgB;AAChB,+DAA+D;AAC/D;AACA,YAAY;AACZ,QAAQ;AACR;;;;;;AAMA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,QAAQ;;AAER;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sC;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ;;AAER;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA,QAAQ;;AAER;AACA,yE;AACA;AACA;AACA,QAAQ;;AAER;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;AACA;;AAEA;AACA,uD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;AAEA;AACA,8BAA8B,SAAS,OAAO,SAAS;AACvD,qDAAqD,WAAW;AAChE,mDAAmD,WAAW;AAC9D;AACA;AACA;AACA,6DAA6D,WAAW;AACxE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAC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;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,QAAQ;;AAER;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sC;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,QAAQ;;AAER;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;;AAER;AACA,yE;AACA;AACA;AACA,QAAQ;;AAER;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;AACA;;AAEA;AACA,uD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;;AAEA;AACA,8BAA8B,SAAS,OAAO,SAAS;AACvD,qDAAqD,WAAW;AAChE,mDAAmD,WAAW;AAC9D;AACA;AACA;AACA,6DAA6D,WAAW;AACxE;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B,8BAA8B,iCAAiC,MAAM;AACrE,+FAA+F;AAC/F;AACA,gBAAgB;AAChB,YAAY;;AAEZ;AACA;AACA;;AAEA;AACA,6BAA6B,iCAAiC;AAC9D;;AAEA;;AAEA;AACA,iCAAiC,IAAI,OAAO,OAAO;AACnD,wDAAwD,MAAM;AAC9D,sDAAsD,MAAM;AAC5D;AACA;AACA;AACA,gEAAgE,MAAM;AACtE;AACA;AACA;AACA,eAAe;AACf;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B;AAC9B,QAAQ;;AAER;AACA,8CAA8C;AAC9C,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,YAAY;;AAEZ,mCAAmC;AACnC;AACA;;AAEA,wCAAwC;AACxC,sCAAsC;AACtC;AACA,yBAAyB;AACzB,kDAAkD,IAAI,YAAY,WAAW,GAAG;AAChF;AACA;;AAEA,mCAAmC;AACnC;;AAEA,oCAAoC;AACpC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,mFAAmF;AACnF;AACA;AACA,+BAA+B;AAC/B,mDAAmD;AACnD;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,gBAAgB;AAChB;AACA,gBAAgB;AAChB;AACA,gBAAgB;AAChB,YAAY;AACZ;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,+CAA+C,QAAQ;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,IAAI;;;;;;;;;AASJ;;;AAGA;AACA;AACA;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8B;AACA;;AAEA;AACA,mD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA,0BAA0B,SAAS,OAAO,SAAS;AACnD,iDAAiD,WAAW;AAC5D,+CAA+C,WAAW;AAC1D;AACA;AACA;AACA,yDAAyD,WAAW;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iCAAiC;AAC9D;AACA,eAAe;AACf,WAAW;;;AAGX;AACA,sBAAsB;AACtB,+BAA+B;AAC/B,4CAA4C,MAAM;AAClD,2FAA2F;AAC3F,YAAY;AACZ,QAAQ;;AAER;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,QAAQ;;AAER;AACA;;AAEA;AACA;;AAEA;AACA,8CAA8C,IAAI,YAAY,WAAW;AACzE;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA,YAAY;AACZ,QAAQ;AACR;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2CAA2C,QAAQ;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;;;;;;;;AAQA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,0BAA0B;;AAE1B;AACA;AACA;AACA,QAAQ;AACR;;;AAGA,6BAA6B;AAC7B;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wBAAwB;;AAExD,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wBAAwB;;AAExD,KAAK;;;;AAIL,0BAA0B;AAC1B;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA,0BAA0B,uBAAuB;;AAEjD;;AAEA;;AAEA;;AAEA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B;AAC7B,gCAAgC,cAAc;AAC9C,KAAK;AACL;AACA;;AAEA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uDAAuD;;AAEvD,iCAAiC;AACjC,uCAAuC,WAAW;AAClD,SAAS;AACT;AACA;AACA;;AAEA,6BAA6B;AAC7B;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;;;;;AAML;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;;AAErE;AACA,gCAAgC,cAAc;AAC9C,mCAAmC,WAAW;AAC9C,KAAK;AACL;AACA;AACA;;AAEA,wDAAwD;AACxD,uCAAuC;AACvC,8CAA8C;;AAE9C,4CAA4C;;AAE5C,6BAA6B;AAC7B;AACA,KAAK;;AAEL;AACA,kFAAkF;AAClF;AACA;AACA,SAAS;AACT,wDAAwD;AACxD;AACA;;AAEA,qDAAqD,OAAO,KAAK;AACjE;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uCAAuC,WAAW;AAClD,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA,0BAA0B;AAC1B;AACA,SAAS;AACT,wDAAwD;AACxD;;AAEA,qDAAqD,OAAO;;AAE5D;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,uCAAuC,WAAW;AAClD,SAAS;AACT;AACA;AACA,KAAK;;;;;;;AAOL;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;;;AAG9D;AACA,+BAA+B,cAAc;AAC7C,iCAAiC,WAAW;AAC5C,IAAI;AACJ;AACA;AACA;;AAEA,uDAAuD;AACvD,sCAAsC;AACtC,6CAA6C;;AAE7C,2CAA2C;;AAE3C,4BAA4B;AAC5B;AACA,IAAI;;AAEJ;AACA,iFAAiF;AACjF;AACA;AACA,QAAQ;AACR,uDAAuD;AACvD;AACA;;AAEA,oDAAoD,OAAO,KAAK;;AAEhE,6BAA6B;AAC7B;AACA,QAAQ;;;AAGR;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA,0DAA0D;;AAE1D;AACA;AACA,qCAAqC,WAAW;AAChD,QAAQ;AACR;AACA;AACA,IAAI;;AAEJ;AACA,yBAAyB;AACzB;AACA,QAAQ;AACR,uDAAuD;AACvD;;AAEA,oDAAoD,OAAO;;AAE3D,6BAA6B;AAC7B;AACA,QAAQ;;AAER;AACA;AACA,QAAQ;AACR;AACA;;AAEA,0DAA0D;;;AAG1D;AACA,qCAAqC,WAAW;AAChD,QAAQ;AACR;AACA;AACA,IAAI;;AAEJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;;AAEJ,mDAAmD;AACnD,kDAAkD;AAClD;AACA,0DAA0D;AAC1D,mCAAmC;;AAEnC,uDAAuD;AACvD,sCAAsC;AACtC,oCAAoC;AACpC;AACA,+DAA+D,OAAO;AACtE;AACA;AACA,mBAAmB;AACnB;;AAEA;;AAEA;AACA,gDAAgD,WAAW;AAC3D,mBAAmB;AACnB;AACA;;;;AAIA;;AAEA,YAAY;AACZ;AACA,IAAI;;;;AAIJ;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,cAAc;AAC7C,iCAAiC,WAAW;AAC5C,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI;;AAEJ,sCAAsC;;AAEtC;AACA,iBAAiB;AACjB,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;;AAEA,kBAAkB,mBAAmB,OAAO;AAC5C;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA,oDAAoD,OAAO;;AAE3D;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA,qCAAqC,WAAW;AAChD,QAAQ;AACR;AACA;;AAEA,qDAAqD;AACrD;AACA,IAAI;;AAEJ;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA,oDAAoD,OAAO;;AAE3D;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA,qCAAqC,WAAW;AAChD,QAAQ;AACR;AACA;;AAEA,qDAAqD;AACrD;AACA,IAAI;;AAEJ,wBAAwB;AACxB;AACA,kEAAkE;;AAElE;AACA,sEAAsE;;AAEtE,wDAAwD,OAAO,KAAK;;AAEpE,oCAAoC;AACpC,yCAAyC,WAAW;AACpD,YAAY;AACZ,gDAAgD;AAChD;;AAEA,yDAAyD;AACzD;AACA,QAAQ;AACR,IAAI;;;;AAIJ;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,qCAAqC;;AAErC;;AAEA,kCAAkC;;AAElC;AACA;;;AAGA;;AAEA;;;;;AAKA;AACA;AACA;AACA,iDAAiD;;AAEjD,8CAA8C;AAC9C,mCAAmC;AACnC;;AAEA,qDAAqD;AACrD;AACA;;AAEA;AACA;;AAEA;AACA,+CAA+C;AAC/C,IAAI;;;AAGJ;AACA,sDAAsD;AACtD;AACA;AACA,QAAQ,OAAO;AACf;AACA;AACA;AACA,IAAI;;;AAGJ;AACA;AACA;AACA;;AAEA,qDAAqD;;AAErD,mDAAmD;;AAEnD,yDAAyD;;;;;;AAMzD;;;AAGA;AACA;AACA;;AAEA,kCAAkC;AAClC;;AAEA;;AAEA;;AAEA,gCAAgC;;AAEhC;AACA;AACA;AACA;AACA;AACA,gCAAgC;;AAEhC;AACA,+BAA+B;;;AAG/B;;AAEA,yCAAyC;AACzC;AACA;AACA;AACA;;AAEA,8CAA8C;;AAE9C;AACA;;AAEA;AACA,8BAA8B;;;AAG9B;AACA;AACA;AACA;;AAEA,uBAAuB;;;AAGvB;;AAEA;AACA,+BAA+B;;AAE/B;;AAEA,uCAAuC;;;AAGvC;AACA;AACA;;;AAGA;;AAEA;AACA,uEAAuE;AACvE;AACA,QAAQ;AACR;AACA;AACA,IAAI;;;AAGJ,6C;;AAEA;AACA;AACA;AACA;AACA,oCAAoC;;;;AAIpC;;AAEA;;;AAGA;AACA,uEAAuE;AACvE;AACA;AACA;AACA;;;AAGA;AACA,2DAA2D;AAC3D,wCAAwC;AACxC,mBAAmB;AACnB;AACA,+BAA+B;AAC/B,6GAA6G;AAC7G,SAAS;AACT,8GAA8G;AAC9G;AACA;;AAEA;AACA;AACA,gEAAgE;AAChE,sDAAsD,eAAe,OAAO;;AAE5E,kCAAkC;AAClC,mDAAmD;AACnD;AACA,0DAA0D;AAC1D,iEAAiE;AACjE,iBAAiB;AACjB,sDAAsD;AACtD;;AAEA,0CAA0C;AAC1C;AACA,iBAAiB;;AAEjB,oDAAoD;;AAEpD,4BAA4B;AAC5B,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA,uDAAuD;;AAEvD,+CAA+C;AAC/C,8CAA8C;AAC9C;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB;AACxB,SAAS;AACT;AACA;AACA;AACA;AACA;;;;;;AAMA;;;AAGA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA,8CAA8C;AAC9C,yEAAyE;AACzE;AACA;AACA,mFAAmF;AACnF;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,uFAAuF;AACvF,gBAAgB;AAChB;AACA,4EAA4E;AAC5E;;AAEA;AACA;AACA,gBAAgB;;AAEhB;;AAEA;AACA,YAAY;AACZ,QAAQ;AACR;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA,0CAA0C;AAC1C,oDAAoD;AACpD,YAAY;AACZ,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ;AACR;;AAEA;AACA;AACA;;;;;;;;AAQA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,sBAAsB;AACtB;AACA,QAAQ;;AAER,yBAAyB;AACzB;AACA;AACA;;AAEA;;AAEA,gCAAgC;AAChC,qCAAqC;;;AAGrC;AACA;;;;;AAKA;;AAEA;;AAEA;;AAEA,6BAA6B;AAC7B;AACA;;AAEA,6BAA6B;AAC7B,4CAA4C,UAAU,YAAY,SAAS;AAC3E;AACA;;AAEA,qCAAqC;;AAErC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA,4CAA4C,UAAU,YAAY,QAAQ;AAC1E;AACA;;;;;AAKA;;AAEA;AACA,6BAA6B;;AAE7B;AACA;;AAEA,cAAc;AACd;;;;AAIA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA,4CAA4C,UAAU,YAAY,QAAQ;AAC1E;;AAEA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA,6BAA6B;AAC7B,YAAY;AACZ;AACA;AACA;AACA;;;;;AAKA;;AAEA;AACA,6BAA6B;AAC7B,8BAA8B;;AAE9B;AACA,iBAAiB;AACjB,mBAAmB;;AAEnB,cAAc;;;;;;AAMd;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,2BAA2B;AAC3B;;;AAGA;AACA,4CAA4C,UAAU,YAAY,UAAU;AAC5E;;AAEA,kBAAkB;AAClB;AACA;;AAEA,qBAAqB;AACrB;AACA,+B;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA,uBAAuB;AACvB,yBAAyB;AACzB,iBAAiB;AACjB,yBAAyB;AACzB;;;AAGA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B;;AAE7B,oBAAoB;AACpB,4CAA4C,UAAU,EAAE,cAAc,YAAY,UAAU,GAAG;AAC/F;;AAEA;AACA;AACA;;AAEA;AACA;AACA,+B;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA,6BAA6B;AAC7B,8BAA8B;AAC9B;;;;;;;AAOA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;;AAIA,oBAAoB;;AAEpB,iBAAiB;AACjB;AACA,2BAA2B;AAC3B,+BAA+B;AAC/B,IAAI;;AAEJ,uBAAuB;;AAEvB;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,IAAI;;AAEJ;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,MAAM;AACN;;AAEA;;AAEA,eAAe;AACf;;;;AAIA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;;;;;AAKA;AACA;;AAEA;;AAEA;AACA,sBAAsB;;AAEtB;;AAEA,WAAW,KAAK;;AAEhB;AACA;AACA;;AAEA,oCAAoC;AACpC;AACA;AACA;;AAEA;;AAEA,WAAW,kBAAkB,eAAe;AAC5C;AACA,8BAA8B;;AAE9B,kBAAkB,MAAM,OAAO,IAAI;;;AAGnC,kCAAkC;;AAElC,kBAAkB,SAAS,OAAO,WAAW;;;AAG7C,WAAW;;;AAGX;AACA;;;AAGA;AACA;;;;;AAKA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;;;AAGJ;;AAEkC;AACE;AACA;AACA;AACF;AACE;AACE;AACG;AACzC;AACA,2CAA2C,gEAAS,iCAAiC;AACrF;AACA;;AAEA;AACA,IAAI,6DAAI;AACR,IAAI,8DAAK,wCAAwC;AACjD,IAAI,8DAAK;AACT,IAAI,8DAAK;AACT,IAAI,6DAAI;AACR,IAAI,8DAAK;AACT,IAAI,+DAAM,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL,CAAC;;;AAGD;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;;;AAIA;;AAEA;AACA,iE;;;;;;;;;;;;ACjuKA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA,2CAA2C,IAAI,YAAY,WAAW;AACtE;;AAEA;AACA;;AAEkB","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./js/script.js\");\n","function calc() {\n    // Calculator\n\n    const result = document.querySelector('.calculating__result span');\n    \n    let sex, height, weight, age, ratio;\n\n    if (localStorage.getItem('sex')) {\n        sex = localStorage.getItem('sex');\n    } else {\n        sex = 'female';\n        localStorage.setItem('sex', 'female');\n    }\n\n    if (localStorage.getItem('ratio')) {\n        ratio = localStorage.getItem('ratio');\n    } else {\n        ratio = 1.375;\n        localStorage.setItem('ratio', 1.375);\n    }\n\n    function calcTotal() {\n        if (!sex || !height || !weight || !age || !ratio) {\n            result.textContent = '____';\n            return;\n        }\n        if (sex === 'female') {\n            result.textContent = Math.round((447.6 + (9.2 * weight) + (3.1 * height) - (4.3 * age)) * ratio);\n        } else {\n            result.textContent = Math.round((88.36 + (13.4 * weight) + (4.8 * height) - (5.7 * age)) * ratio);\n        }\n    }\n\n    calcTotal();\n\n    function initLocalSettings(selector, activeClass) {\n        const elements = document.querySelectorAll(selector);\n\n        elements.forEach(elem => {\n            elem.classList.remove(activeClass);\n            if (elem.getAttribute('id') === localStorage.getItem('sex')) {\n                elem.classList.add(activeClass);\n            }\n            if (elem.getAttribute('data-ratio') === localStorage.getItem('ratio')) {\n                elem.classList.add(activeClass);\n            }\n        });\n    }\n\n    initLocalSettings('#gender div', 'calculating__choose-item_active');\n    initLocalSettings('.calculating__choose_big div', 'calculating__choose-item_active');\n\n    function getStaticInformation(selector, activeClass) {\n        const elements = document.querySelectorAll(selector);\n\n        elements.forEach(elem => {\n            elem.addEventListener('click', (e) => {\n                if (e.target.getAttribute('data-ratio')) {\n                    ratio = +e.target.getAttribute('data-ratio');\n                    localStorage.setItem('ratio', +e.target.getAttribute('data-ratio'));\n                } else {\n                    sex = e.target.getAttribute('id');\n                    localStorage.setItem('sex', e.target.getAttribute('id'));\n                }\n    \n                elements.forEach(elem => {\n                    elem.classList.remove(activeClass);\n                });\n    \n                e.target.classList.add(activeClass);\n    \n                calcTotal();\n            });\n        });\n    }\n\n    getStaticInformation('#gender div', 'calculating__choose-item_active');\n    getStaticInformation('.calculating__choose_big div', 'calculating__choose-item_active');\n\n    function getDynamicInformation(selector) {\n        const input = document.querySelector(selector);\n\n        input.addEventListener('input', () => {\n            if (input.value.match(/\\D/g)) {\n                input.style.border = \"1px solid red\";\n            } else {\n                input.style.border = 'none';\n            }\n            switch(input.getAttribute('id')) {\n                case \"height\":\n                    height = +input.value;\n                    break;\n                case \"weight\":\n                    weight = +input.value;\n                    break;\n                case \"age\":\n                    age = +input.value;\n                    break;\n            }\n\n            calcTotal();\n        });\n    }\n\n    getDynamicInformation('#height');\n    getDynamicInformation('#weight');\n    getDynamicInformation('#age');\n\n}\n\nexport default calc;","import {getResource} from \"../services/services\";// получаем функцию из сервисов в которые мы ее вырезали\n\nfunction cards() {\n    // Используем классы для создание карточек меню\n\n    class MenuCard {\n        constructor(src, alt, title, descr, price, parentSelector, ...classes) {\n            this.src = src;\n            this.alt = alt;\n            this.title = title;\n            this.descr = descr;\n            this.price = price;\n            this.classes = classes;\n            this.parent = document.querySelector(parentSelector);\n            this.transfer = 27;\n            this.changeToUAH(); \n        }\n\n        changeToUAH() {\n            this.price = this.price * this.transfer; \n        }\n\n        render() {\n            const element = document.createElement('div');\n\n            if (this.classes.length === 0) {\n                this.classes = \"menu__item\";\n                element.classList.add(this.classes);\n            } else {\n                this.classes.forEach(className => element.classList.add(className));\n            }\n\n            element.innerHTML = `\n                <img src=${this.src} alt=${this.alt}>\n                <h3 class=\"menu__item-subtitle\">${this.title}</h3>\n                <div class=\"menu__item-descr\">${this.descr}</div>\n                <div class=\"menu__item-divider\"></div>\n                <div class=\"menu__item-price\">\n                    <div class=\"menu__item-cost\">Цена:</div>\n                    <div class=\"menu__item-total\"><span>${this.price}</span> грн/день</div>\n                </div>\n            `;\n            this.parent.append(element);\n        }\n    }\n\n    getResource('http://localhost:3000/menu')\n        .then(data => {\n            data.forEach(({img, altimg, title, descr, price}) => {\n                new MenuCard(img, altimg, title, descr, price, \".menu .container\").render();\n            });\n        });\n\n}\n\nexport default cards;","import {closeModal, openModal} from './modal';//вызываем в одном модуле кусочек другого модуля\n//функций опен и клоз модал тут просто не было\n//но переменной modal просто не существует для этого файла\n//поэтому оригинальную функцию нужно подправить чтобы она получала как аргумент селекторы и передавала их в переменную modal\n\nimport {postData} from \"../services/services\"; // функцию пост дата мы вынесли в services и тут ее принимаем\n\nfunction forms(formSelector, modalTimerId) {\n    // Forms\n\n    const forms = document.querySelectorAll(formSelector);\n    const message = {\n        loading: 'img/form/spinner.svg',\n        success: 'Спасибо! Скоро мы с вами свяжемся',\n        failure: 'Что-то пошло не так...'\n    };\n\n    forms.forEach(item => {\n        bindPostData(item);\n    });\n\n    function bindPostData(form) {\n        form.addEventListener('submit', (e) => {\n            e.preventDefault();\n\n            let statusMessage = document.createElement('img');\n            statusMessage.src = message.loading;\n            statusMessage.style.cssText = `\n                display: block;\n                margin: 0 auto;\n            `;\n            form.insertAdjacentElement('afterend', statusMessage);\n        \n            const formData = new FormData(form);\n\n            const json = JSON.stringify(Object.fromEntries(formData.entries()));\n\n            postData('http://localhost:3000/requests', json)\n            .then(data => {\n                console.log(data);\n                showThanksModal(message.success);\n                statusMessage.remove();\n            }).catch(() => {\n                showThanksModal(message.failure);\n            }).finally(() => {\n                form.reset();\n            });\n        });\n    }\n\n    function showThanksModal(message) {\n        const prevModalDialog = document.querySelector('.modal__dialog');\n\n        prevModalDialog.classList.add('hide');\n        openModal('.modal', modalTimerId);\n\n        const thanksModal = document.createElement('div');\n        thanksModal.classList.add('modal__dialog');\n        thanksModal.innerHTML = `\n            <div class=\"modal__content\">\n                <div class=\"modal__close\" data-close>×</div>\n                <div class=\"modal__title\">${message}</div>\n            </div>\n        `;\n        document.querySelector('.modal').append(thanksModal);\n        setTimeout(() => {\n            thanksModal.remove();\n            prevModalDialog.classList.add('show');\n            prevModalDialog.classList.remove('hide');\n            closeModal('.modal');\n        }, 4000);\n    }\n}\n\nexport default forms;","function closeModal(modalSelector) {\n    const modal = document.querySelector(modalSelector);\n    modal.classList.add('hide');\n    modal.classList.remove('show');\n    document.body.style.overflow = '';\n}\n\nfunction openModal(modalSelector, modalTimerId) {\n    const modal = document.querySelector(modalSelector);\n    modal.classList.add('show');\n    modal.classList.remove('hide');\n    document.body.style.overflow = 'hidden';\n    console.log(modalTimerId);//каждый раз когда открывается модальное окно смотрим на этот аругмент\n    if (modalTimerId){//если этот таймер айди передается с аргументом то только тогда мы сбрасываем интервал\n    clearInterval(modalTimerId);\n    }\n}\n\n\nfunction modal(triggerSelector, modalSelector, modalTimerId) {\n    // Modal\n\n    const modalTrigger = document.querySelectorAll(triggerSelector),\n        modal = document.querySelector(modalSelector);\n\n    modalTrigger.forEach(btn => {\n        btn.addEventListener('click',() => openModal(modalSelector,modalTimerId));//тут стрелочная функция для того чтобы наебать обработчик событий\n    });\n\n\n    modal.addEventListener('click', (e) => {\n        if (e.target === modal || e.target.getAttribute('data-close') == \"\") {\n            closeModal(modalSelector);\n        }\n    });\n\n    document.addEventListener('keydown', (e) => {\n        if (e.code === \"Escape\" && modal.classList.contains('show')) { \n            closeModal(modalSelector);\n        }\n    });\n\n\n    function showModalByScroll() {\n        if (window.pageYOffset + document.documentElement.clientHeight >= document.documentElement.scrollHeight) {\n            openModal(modalSelector, modalTimerId);\n            window.removeEventListener('scroll', showModalByScroll);\n        }\n    }\n    window.addEventListener('scroll', showModalByScroll);\n}\n\nexport default modal;\nexport {closeModal};\nexport {openModal};","function slider({container, slide, nextArrow, prevArrow, totalCounter, currentCounter, wrapper, field }) {\n    // Slider\n\n    let offset = 0;\n    let slideIndex = 1;\n\n    const slides = document.querySelectorAll(slide),\n        slider = document.querySelector(container),\n        prev = document.querySelector(prevArrow),\n        next = document.querySelector(nextArrow),\n        total = document.querySelector(totalCounter),\n        current = document.querySelector(currentCounter),\n        slidesWrapper = document.querySelector(wrapper),\n        width = window.getComputedStyle(slidesWrapper).width,\n        slidesField = document.querySelector(field);\n\n    if (slides.length < 10) {\n        total.textContent = `0${slides.length}`;\n        current.textContent =  `0${slideIndex}`;\n    } else {\n        total.textContent = slides.length;\n        current.textContent =  slideIndex;\n    }\n    \n    slidesField.style.width = 100 * slides.length + '%';\n    slidesField.style.display = 'flex';\n    slidesField.style.transition = '0.5s all';\n\n    slidesWrapper.style.overflow = 'hidden';\n\n    slides.forEach(slide => {\n        slide.style.width = width;\n    });\n\n    slider.style.position = 'relative';\n\n    const indicators = document.createElement('ol'),\n          dots = [];\n    indicators.classList.add('carousel-indicators');\n    indicators.style.cssText = `\n        position: absolute;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        z-index: 15;\n        display: flex;\n        justify-content: center;\n        margin-right: 15%;\n        margin-left: 15%;\n        list-style: none;\n    `; // Если хотите - добавьте в стили, но иногда у нас нет доступа к стилям\n    slider.append(indicators);\n\n    for (let i = 0; i < slides.length; i++) {\n        const dot = document.createElement('li');\n        dot.setAttribute('data-slide-to', i + 1);\n        dot.style.cssText = `\n            box-sizing: content-box;\n            flex: 0 1 auto;\n            width: 30px;\n            height: 6px;\n            margin-right: 3px;\n            margin-left: 3px;\n            cursor: pointer;\n            background-color: #fff;\n            background-clip: padding-box;\n            border-top: 10px solid transparent;\n            border-bottom: 10px solid transparent;\n            opacity: .5;\n            transition: opacity .6s ease;\n        `;\n        if (i == 0) {\n            dot.style.opacity = 1;\n        }\n        indicators.append(dot);\n        dots.push(dot);\n    }\n\n    next.addEventListener('click', () => {\n        if (offset == (deleteNotDigits(width) * (slides.length - 1))) {\n            offset = 0;\n        } else {\n            offset += deleteNotDigits(width); \n        }\n\n        slidesField.style.transform = `translateX(-${offset}px)`;\n\n        if (slideIndex == slides.length) {\n            slideIndex = 1;\n        } else {\n            slideIndex++;\n        }\n\n        if (slides.length < 10) {\n            current.textContent =  `0${slideIndex}`;\n        } else {\n            current.textContent =  slideIndex;\n        }\n\n        dots.forEach(dot => dot.style.opacity = \".5\");\n        dots[slideIndex-1].style.opacity = 1;\n    });\n\n    prev.addEventListener('click', () => {\n        if (offset == 0) {\n            offset = deleteNotDigits(width) * (slides.length - 1);\n        } else {\n            offset -= deleteNotDigits(width);\n        }\n\n        slidesField.style.transform = `translateX(-${offset}px)`;\n\n        if (slideIndex == 1) {\n            slideIndex = slides.length;\n        } else {\n            slideIndex--;\n        }\n\n        if (slides.length < 10) {\n            current.textContent =  `0${slideIndex}`;\n        } else {\n            current.textContent =  slideIndex;\n        }\n\n        dots.forEach(dot => dot.style.opacity = \".5\");\n        dots[slideIndex-1].style.opacity = 1;\n    });\n\n    dots.forEach(dot => {\n        dot.addEventListener('click', (e) => {\n            const slideTo = e.target.getAttribute('data-slide-to');\n\n            slideIndex = slideTo;\n            offset = deleteNotDigits(width) * (slideTo - 1);\n\n            slidesField.style.transform = `translateX(-${offset}px)`;\n\n            if (slides.length < 10) {\n                current.textContent =  `0${slideIndex}`;\n            } else {\n                current.textContent =  slideIndex;\n            }\n\n            dots.forEach(dot => dot.style.opacity = \".5\");\n            dots[slideIndex-1].style.opacity = 1;\n        });\n    });\n\n    function deleteNotDigits(str) {\n        return +str.replace(/\\D/g, '');\n    }\n}\n\nexport default slider;","function tabs(tabsSelector,tabsContentSelector, tabsParentSelector, activeClass) {\n    // Tabs\n    \n\tlet tabs = document.querySelectorAll(tabsSelector),\n\t\ttabsContent = document.querySelectorAll(tabsContentSelector),\n\t\ttabsParent = document.querySelector(tabsParentSelector);\n\n\tfunction hideTabContent() {\n        \n        tabsContent.forEach(item => {\n            item.classList.add('hide');\n            item.classList.remove('show', 'fade');\n        });\n\n        tabs.forEach(item => {\n            item.classList.remove(activeClass);\n        });\n\t}\n\n\tfunction showTabContent(i = 0) {\n        tabsContent[i].classList.add('show', 'fade');\n        tabsContent[i].classList.remove('hide');\n        tabs[i].classList.add(activeClass);\n    }\n    \n    hideTabContent();\n    showTabContent();\n\n\ttabsParent.addEventListener('click', function(event) {\n\t\tconst target = event.target;\n\t\tif(target && target.classList.contains(tabsSelector.slice(1))) {//убрали точку\n            tabs.forEach((item, i) => {\n                if (target == item) {\n                    hideTabContent();\n                    showTabContent(i);\n                }\n            });\n\t\t}\n    });\n}\n\nexport default tabs;","function timer(id, deadline) {\n    // Timer\n\n\n    function getTimeRemaining(endtime) {\n        const t = Date.parse(endtime) - Date.parse(new Date()),\n            days = Math.floor( (t/(1000*60*60*24)) ),\n            seconds = Math.floor( (t/1000) % 60 ),\n            minutes = Math.floor( (t/1000/60) % 60 ),\n            hours = Math.floor( (t/(1000*60*60) % 24) );\n\n        return {\n            'total': t,\n            'days': days,\n            'hours': hours,\n            'minutes': minutes,\n            'seconds': seconds\n        };\n    }\n\n    function getZero(num){\n        if (num >= 0 && num < 10) { \n            return '0' + num;\n        } else {\n            return num;\n        }\n    }\n\n    function setClock(selector, endtime) {\n\n        const timer = document.querySelector(selector),\n            days = timer.querySelector(\"#days\"),\n            hours = timer.querySelector('#hours'),\n            minutes = timer.querySelector('#minutes'),\n            seconds = timer.querySelector('#seconds'),\n            timeInterval = setInterval(updateClock, 1000);\n\n        updateClock();\n\n        function updateClock() {\n            const t = getTimeRemaining(endtime);\n\n            days.innerHTML = getZero(t.days);\n            hours.innerHTML = getZero(t.hours);\n            minutes.innerHTML = getZero(t.minutes);\n            seconds.innerHTML = getZero(t.seconds);\n\n            if (t.total <= 0) {\n                clearInterval(timeInterval);\n            }\n        }\n    }\n\n    setClock(id, deadline);\n}\n\nexport default timer;","\"use strict\";\n\n//lesson7 общение с пользователеи\n\n// alert('Hello'); предупреждение\n\n// const result = confirm(\"Ты пидор?\"); вопрос да/нет\n// console.log(result);\n\n// const answer = prompt(\"Сколько вам лет?\", \"18\"); вопрос с инпутом и плейсхолдером\n// console.log(answer);\n\n// const answers = []; задаем массив\n// answers[0] = prompt('Ваше имя?', ''); записывем данные в массив\n// answers[1] = prompt('Ваша фамилия?', '');\n// answers[2] = prompt('Сколько вам лет?', '');\n// document.write(answers); переписать html\n\n\n\n\n// lesson 8 интерполяция ES6\n// const category = 'Toys'; Подстановка переменных через ${xxx}\n\n// console.log(`https://sumeurl.com/${category}/5`);\n\n// const user = 'Ivan';\n// alert(`привет, ${user}`)\n\n\n\n\n\n\n\n//lesson 9 операторы\n// console.log('arr' + ' - object');\n//console.log(4 + +\"5\"); унарный плюс делает строку числом\n\n// let incr = 10,\n//    decr = 10;\n\n//     incr++; или ++incr  инкремент увеличивает на 1\n//     decr--; или --decr  декремент уменьшает на 1\n//     console.log(incr++), сначала даст старое значение  потом увеличит\n//      console.log(--decr);   сначала уменьшит потом выдаст значение\n\n\n//    console.log(5%2); % возвращает остаток отделения\n\n//console.log(2*4 == 8); == возвращает true или false не строго (бул типа данных) === строго\n\n//&& И \n// || ИЛИ\n\n// const isChecked = true,\n//     isClose = false;\n\n// console.log(isChecked && isClose);  возвращает true если оба значения true/ запинается на правде\n// console.log(isChecked || isClose); возвращает true если хоть одно значение true/ запинается на лжи\n\n\n// ! оператор отрицания\n\n//  const isChecked = true,\n//         isClose = false;\n\n//  console.log(isChecked && !isClose); все равно вернет true потому что перед isClosed стоит !\n\n\n\n//уроки 10и11 были про гит \n\n// lesson 12 начинаем создавать приложение\n\n// let numberOfFilms = prompt('Сколько фильмов вы уже посмотрели?', '50');\n\n// const personalMovieDB = {\n//     count: numberOfFilms,\n//     movies: {},\n//     actors: {},\n//     genres: [],\n//     privat: false\n// };\n\n\n// let movieFirst = prompt('Один из последних просмотренных фильмов', 'Терминатор 4');\n// let movieRateFirst = prompt('На сколько оцениете его?', 'От 1 до 5');\n// let movieSecond = prompt('Один из последних просмотренных фильмов', 'Нерв');\n// let movieRateSecond = prompt('На сколько оцениете его?', 'От 1 до 5');\n\n// personalMovieDB.movies[movieFirst] = movieRateFirst;\n// personalMovieDB.movies[movieSecond] = movieRateSecond;\n\n// console.log(personalMovieDB);\n\n\n\n\n\n\n// lesson 13 условия\n\n\n// if (4 == 4) {\n//     console.log('ok!');\n// } else {\n//     console.log('Error');\n// }\n\n\n//const num = 50;\n\n// if (num < 49) {\n//     console.log('Error');\n// } else if (num > 100) {\n//     console.log('Много');\n// } else {\n//     console.log('OK');\n// }\n\n// (num === 50) ? console.log('OK') : console.log('Error'); Тернарный аргумент\n\n// const num = 50;// Не может сравнивать больше меньше\n// switch (num) {\n//     case 49:\n//         console.log('Неверно');\n//         break;\n//     case 100: \n//         console.log('Неверно');\n//         break;\n//     case 50:\n//         console.log('В точку!');\n//         break;\n//     default: \n//         console.log(\"Не в этот раз\")\n//         break;\n// }\n\n\n\n// lesson 14 циклы\n\n//let num = 50;\n\n// while (num <= 55) {\n//     console.log(num);\n//     num++;\n// }\n\n\n// do {\n//     console.log(num);\n//     num++;\n// }\n// while (num <55);\n\n// for (let i = 1; i < 8; i++) {\n//     console.log(num);\n//     num++;\n// }\n\n// for (let i = 1; i < 10; i++) {\n//     if (i === 6) {\n//         //break; прерывает цикл\n//         //continue; исключает значение 6 и продолжает дальше\n//     }\n\n//     console.log(i);\n\n// }\n\n\n\n// lesson 15 Практика. Условия и циклы\n/* Задание на урок:\n\n1) Автоматизировать вопросы пользователю про фильмы при помощи цикла\n\n2) Сделать так, чтобы пользователь не мог оставить ответ в виде пустой строки,\nотменить ответ или ввести название фильма длинее, чем 50 символов. Если это происходит - \nвозвращаем пользователя к вопросам опять\n\n3) При помощи условий проверить  personalMovieDB.count, и если он меньше 10 - вывести сообщение\n\"Просмотрено довольно мало фильмов\", если от 10 до 30 - \"Вы классический зритель\", а если больше - \n\"Вы киноман\". А если не подошло ни к одному варианту - \"Произошла ошибка\"\n\n4) Потренироваться и переписать цикл еще двумя способами*/\n\n\n\n// Код возьмите из предыдущего домашнего задания\n\n// let numberOfFilms = +prompt('Сколько фильмов вы уже посмотрели?', '');\n\n\n// const personalMovieDB = {\n//     count: numberOfFilms,\n//     movies: {},\n//     actors: {},\n//     genres: [],\n//     privat: false\n// };\n\n// let questions = 0;\n\n// while (questions < 2) {\n//     let movieFirst = prompt('Один из последних просмотренных фильмов', '');\n//     let movieRateFirst = prompt('На сколько оцениете его?', '');\n\n//     if (movieFirst == \"\" || movieRateFirst == \"\") {\n//         questions = 0;\n//         alert('Ответте на вопросы заново');\n//     } else if (movieFirst == null || movieRateFirst == null) {\n//         questions = 0;\n//         alert('Ответте на вопросы заново');\n//     } else if (movieFirst.length > 50 || movieRateFirst.length > 50) {\n//         questions = 0;\n//         alert('Ответ должен быть короче 50 символов');\n//     } else {\n//         questions++;\n// personalMovieDB.movies[movieFirst] = movieRateFirst;\n// personalMovieDB.movies[movieSecond] = movieRateSecond;\n//     }\n//     \n//Альтернативный вариант из курса \n\n\n\n// for (let i = 0; i < 2; i++) {\n//     const a = prompt('Один из последних просмотренных фильмов?', ''),\n//           b = prompt('На сколько оцените его?', '');\n\n//     if (a != null && b != null && a != '' && b != '' && a.length < 50) {\n//         personalMovieDB.movies[a] = b;\n//         console.log('done');\n//     } else {\n//         console.log('error');\n//         i--;\n//     }\n// }\n\n\n\n\n\n\n// }\n\n\n// if (personalMovieDB.count < 10) {\n//     alert('Просмотрено довольно мало фильмов');\n// } else if (personalMovieDB.count < 30) {\n//     alert('Вы классический зритель');\n// } else {\n//     alert('Вы киноман');\n// }\n\n\n//Lesson 16 Функции.Стрелочные функции\n\n// let num = 20;//глобальная переменная\n\n// function showFirstMessage(text) { // function declaration\n//     console.log(text);\n//     let num = 20; //локальная переменная существует только внутри функции но \n//     //глобальная переменная может быть использована внутри функции\n//     console.log(num); // сначала будет использована локальная функция (Замыкание функции) потом глобальная\n// }\n\n// showFirstMessage(\"Hello World!\");\n// console.log(num);\n\n// function calc(a, b) {\n//     return (a + b); // все что после return выполняться не будет\n// }\n\n// console.log(calc(8, 7));// выдаст суммудвухаргументов\n\n// function ret(){\n//     let num = 50;\n//     //какой то длинный код\n//     return num;// вывести результат вычислений\n// }\n// const anotherNum = ret();// вызов функции \n\n// //функции работают до того как они быливызваны (как var толькобез ошибок) они считываются в первую очередь\n\n// const logger = function() { //function expression можно вызвать только после объявления\n\n//     console.log('Hello');\n// }\n\n// logger();// вызов функции \n\n// const calc = (a, b) => {\n//     console.log('Something');\n//      return a + b; };// стрелочная функция запись для больших функций\n// const calc2 = (a, b) => a + b ;// стрелочная функция запись для функций в 1 строчку\n\n\n\n\n\n// Lesson 17 Методы и свойства строк и чисел\n// методы - вспомогательные функции как я понял они уже есть в JS это как готовые шаблоны. Не бро, это функции внутри объекта\n// свойства - вспомогательные значения\n// их дохуя учить наизусть не нужно\n\n\n\n// const str = 'test';\n// const arr = [1, 2, 4];\n\n// console.log(str.length);// выдает длину строки\n// console.log(arr.length);// выдает количество элементов внутри массива\n// // .length - свойство\n// // методы вызываются как функции ()\n// //console.log(str[2]);// покажет третий символ в строке\n\n\n// console.log(str.toUpperCase());// применен методкоторый сделает все буквыстроки в апперкейсе\n// // но не меняет саму строку str\n// console.log(str.toLowerCase());// в нижний регистр\n\n// const fruit = 'Some fruit';\n// console.log(fruit.indexOf('fruit'));// ищет кусокстроки или буквы если не находит то выдает -1\n\n// const logg = \"Hello World\";\n// console.log(logg.slice(6, 11));// вырезать мир))\n// console.log(logg.slice(6));// вырезать от 6 до конца строки\n\n// console.log(logg.substring(6, 11));// то же самое что и слайс но не поддерживает отриц значения(отсчет справа)\n\n// console.log(logg.substr(6, 4));// вырежет 4 символа начиная с 6 позиции\n\n//есть еще splice(1, 1) он вырезает элемент массива илизаменяет его\n\n\n\n//числа бля че так потно \n\n// const num = 12.2;\n// console.log(Math.round(num));// округляет к ближайшему целому и возвращает 12 \n\n// const test = \"12.2px\";\n// console.log(parseInt(test)); // переводит в другую систему счисления если применить на строке вернет 12 \n// console.log(parseFloat(test)); // переводит в десятичное значение с точкой вернет 12,2\n\n\n\n\n\n//lesson18 Практика Используем функции\n/* Задание на урок:\n\n1) Первую часть задания повторить по уроку\n\n2) Создать функцию showMyDB, которая будет проверять свойство privat. Если стоит в позиции\nfalse - выводит в консоль главный объект программы\n\n3) Создать функцию writeYourGenres в которой пользователь будет 3 раза отвечать на вопрос \n\"Ваш любимый жанр под номером ${номер по порядку}\". Каждый ответ записывается в массив данных\ngenres\n\nP.S. Функции вызывать не обязательно*/\n\n\n\n// Код возьмите из предыдущего домашнего задания\n\n// let numberOfFilms ;\n\n// function start () {\n//     numberOfFilms = +prompt('Сколько фильмов вы уже посмотрели?', '');\n\n//     while(numberOfFilms == '' || numberOfFilms == null || isNaN(numberOfFilms)){//isNaN возвращает правду если записано не число\n//         numberOfFilms = +prompt('Сколько фильмов вы уже посмотрели?', '');\n//     }\n// }\n\n// start();\n\n// const personalMovieDB = {\n//     count: numberOfFilms,\n//     movies: {},\n//     actors: {},\n//     genres: [],\n//     privat: false\n// };\n\n\n\n\n// function rememberMyFilms() {\n//     for (let i = 0; i < 2; i++) {\n//         const a = prompt('Один из последних просмотренных фильмов?', ''),\n//               b = prompt('На сколько оцените его?', '');\n\n//         if (a != null && b != null && a != '' && b != '' && a.length < 50) {\n//             personalMovieDB.movies[a] = b;\n//             console.log('done');\n//         } else {\n//             console.log('error');\n//             i--;\n//         }\n//     }\n// }\n\n// rememberMyFilms();\n\n\n\n// function detectPersonalLevel(){\n//     if (personalMovieDB.count < 10) {\n//         alert('Просмотрено довольно мало фильмов');\n//     } else if (personalMovieDB.count < 30) {\n//         alert('Вы классический зритель');\n//     } else if(personalMovieDB.count >=30){\n//             alert('Вы киноман');\n//     } else {\n//         console.log('Произошла ошибка');\n//     }\n// }\n\n// detectPersonalLevel();\n\n\n// function showMyDB(){// Мой вариант\n//     if(personalMovieDB.privat == false){\n//         console.log(personalMovieDB);\n//     }\n// }\n\n// showMyDB();\n\n// function writeYourGenres() {//Мой вариант\n//     for(let i=0, gn=1; i < 3; i++, gn++ ) {   \n//         const a = prompt('Ваш любимый жанр под номером ' + gn);\n//         personalMovieDB.genres[i] = a;\n\n//     }\n\n// }\n\n// function showMyDB (hidden) { //Вариант из курса\n//     if (!hidden) {\n//         console.log(personalMovieDB);\n//     }\n// }\n\n// showMyDB(personalMovieDB.privat);\n\n// function writeYourGenres() {// Вариант из курса\n//     for (let i = 1; i <= 3; i++) {\n//         personalMovieDB.genres[i - 1] = prompt(`Ваш любимый жанр под номером ${i}`);\n//     }\n// }\n\n\n\n\n\n\n//lesson 19 Callbck функции\n\n\n// function first(){\n//     //Do something\n//     setTimeout(function() {// задержка\n//         console.log(1);\n//     }, 500);\n// }\n\n// function second(){\n//     console.log(2);\n// }\n\n// first();//выполнится второй\n// second();\n\n\n// //Если функции в коде идут одна за другой они могут давать результат в разное время\n\n// function learnJS(lang, callback) {// callback функция нужна длятого чтобы упоряочить выполнение функций\n//     console.log(`Я учу: ${lang}`);\n//     callback();// пока она ничего не делает.это просто аргумент\n// }\n\n// function done () {\n//     console.log('Я прошел этот урок!');\n// }\n\n// learnJS('JavaScript', done);\n\n// так одна функция не не начнется пока другая не завершитсвою работу\n// вроде просто функция в функции\n\n\n\n\n\n// Lesson 20 Объекты, деструктуризация объектов\n\n// const options = {\n//     name:'test',\n//     width: 1024,\n//     height:1024,\n//     colors: {\n//         border: 'black',\n//         bg: 'red'\n//     },\n//     makeTest: function(){\n//         console.log(\"Test\");\n//     }\n// };\n\n// options.makeTest(); // запуск функции внутри объектаю Это метод\n\n// const {border, bg} = options.colors;// Деструктуризация. Вытаскиваем свойства из вложенноего объекта\n// console.log(border);// выдаст деструктурированное свойство без исользования options['colors']['border'] \n\n// console.log(Object.keys(options).length);// выдаст массив совсеми ключами объекта options, а length выдаст количество элементов(размер массива)\n\n//console.log(options['colors']['border']);\n\n\n// console.log(options.name);\n\n// delete options.name;\n\n// console.log(options);\n// let counter = 0; // счетчик количества свойств\n// for (let key in options){ // добираемся до объекта внутриобъекта\n//     if(typeof(options[key]) === 'object') {\n//         for(let i in options[key]) {\n//             console.log(`Свойство ${i} имеет значение ${options[key][i]}`);\n//             counter++;\n//         }\n//     } else {\n//         console.log(`Свойство ${key} имеет значение ${options[key]}`);\n//         counter++;\n//     }\n\n// }\n\n// console.log(counter);\n\n\n\n\n\n// 21 Lesson Массивы и псевдомассивы\n\n// Псевдомасив выглядит также как и массив но не имеет никаких методов  \n\n\n//const arr = [1, 2, 3, 6, 8];\n// arr.sort(compareNum);// без аргументов сортирует по разрядам или алфавиту \n// console.log(arr);\n\n// function compareNum(a, b){// функция для того чтобы сортировть по порядку по возрастающей\n//     return a - b;\n// }\n// arr[99] = 0;\n// console.log(arr.length);// свойство length выдает индекс последнего элемента + 1. Нельзя нарушатьпоследовательность в массиве\n\n// arr.pop(); // удаляет последний элемент из массива\n// arr.push(10); // добавляяет элемент в конец массива\n// если работаешь сначалом массива то сбивается индекс так что редко используются методы для работы с началом массива\n\n// for(let i = 0; i< arr.length; i++) {//перебрать все элементы внутри массива\n//     console.log(arr[i]);\n// }\n\n\n// for (let value of arr) {// второй метод перебора for of не работает на объекты но работает на массивы и ему подобные тут можноиспользовать break\n//     console.log(value);\n// }\n\n//  arr.forEach(function(item, i, arr) { // метод forEach третий способ перебора в котором задается функция которая будет применена для каждого элемента массива \n//     //его можно настроить подробнее: 3 аргумента: item - тот элемент который перебираем, i- номер по порядку, arr - ссылка на тот массив который перебираем \n//     console.log(`${i}: ${item} внутри массива ${arr}`);\n// });\n\n// const str = prompt('','');\n// const products = str.split(',');// строка преобразуется в массив с разделителем который будет указан и если в исходной строке будет запятая то она будет делить элементы массива\n// products.sort();// сортирует по алфавиту но сортирует как строки если это числа то по разрядам по возрастающей\n//  console.log(products.join(';')); // выводит массив строкой с заданным разделителем\n\n\n\n\n\n//Lesson 22 передача данных по ссылке или по значению, Spread оператор Копирование объектов\n\n// let a = 5,\n//     b = a;\n\n// b = b + 5;\n\n// console.log(b); покажет 10\n// console.log(a); покажет 5\n\n// const obj = {\n//     a: 5,\n//     b: 1\n// };\n\n// const copy = obj;// ссылка на obj\n\n// copy.a = 10;\n\n// console.log(copy);\n// console.log(obj);\n// тут ожидалось 2 разных значения а = 5 и а = 10 но везде 10 потому что изменяя что то внутри копии\n//если это не примитивный тип данных вроде чилса или строки. В этом случае  const copy = obj; задает ссылку а не копирует obj\n\n\n// function copy(mainObj) { // создаем новый объект перебирая свойства которые были в mainObj который мы передаем в эту функцию при ее применении\n//     // это поверхностная копия.Есть еще и глубокие\n//     let objCopy = {};\n\n\n//     let key;\n//     for (key in mainObj) {\n//         objCopy[key] = mainObj[key];\n//     }\n\n//     return objCopy;\n// }\n\n// // вот к примеру зачем нужен перебор\n// почитай про for in и про for of\n\n// const numbers = {\n//     a: 2,\n//     b: 5,\n//     c:{\n//        x: 7,\n//        y:4 \n//     }\n// };\n\n// const newNumbers = copy(numbers);// запускаем копирующую функцию\n\n// newNumbers.a = 10;\n// newNumbers.c.x = 10;// он сука поменяет и в оригинале numbers\n\n// console.log(newNumbers);\n// console.log(numbers);\n\n\n// const add = {\n//     d: 17,\n//     e:20\n// };\n\n// //console.log(Object.assign(numbers, add));// соединяет 2 объекта\n\n// const clone = (Object.assign({}, add));// еще одинспособ поверхностного копирования черезоединение объекта с пустым объектом\n\n// clone.d = 20;\n\n// // console.log(add);\n// // console.log(clone);// это поверхностная копия \n\n// const oldArray = ['a', 'b', 'c'];\n// const newArray = oldArray.slice();// копирование массива вырезая его от начала до конца\n//slice и splice посмотри чем отличаются\n//Array.splice изменяет исходный массив и возвращает массив, содержащий удаленные элементы.\n//Array.slice не изменяет исходный массив. Он просто возвращает новый массив элементов, который является подмножеством исходного массива.\n\n\n// newArray[1] = 'afefh';\n\n// console.log(newArray);\n// console.log(oldArray);\n\n// const video = ['youtube', 'vimeo', 'rutube'],\n//       blogs = ['wordpress','livejournal', 'blogger'],\n//       internet = [...video, ...blogs, 'vk', 'facebook'];// оператор разворота структуры\n\n//  console.log(internet);\n\n//  function log (a, b, c) {\n//      console.log(a);\n//      console.log(b);\n//      console.log(c);\n//  }\n\n//   const num = [2, 5, 7];\n//   console.log(...num);\n\n\n\n// const array = ['a', 'b', 'c'];\n\n// const array1 = [...array];// четвертый способ копирования\n\n// const q = {\n//     one: 1,\n//     two: 2\n// };\n\n// const newObj = {...q};// эта херня может разворачивать и объекты. Не только массивы\n\n// newObj.two = 3;\n\n// console.log(newObj);\n\n\n\n\n\n\n\n//lesson 23 основы ООП. Прототипно ориентрованное наследование\n\n// let str = \"some\";\n\n// let strObj = new String(str);\n\n// console.log(typeof(str));// покажет что строка\n// console.log(typeof(strObj));// покажет что объект\n\n// //джаваскрипт сначала все запихивает в объект, что то ним делает а потом возвращает то что было\n\n// // есть прототип а есть экземпляр прототипа как легковой автомобиль и бмв м3\n// // так у любого массива будт прототип array ну у array прототип это объект\n// //короче как каскадность. иерархия свойств. те методы которые можно применить к массиву наследуются от объекта\n\n// console.dir([1, 2, 3]);\n\n\n\n// const soldier = {// любой солдат\n//     health: 400,\n//     armor: 100,\n//     sayHello: function(){// любой солдат умеет говорить привет\n//         console.log('Hello');\n//     }\n// };\n\n\n// const john = Object.create(soldier);// создать новый объект джон который будет прототипно наследоваться от солдата\n// // const john = {// конкретный рядовой джон)\n// //     health:100\n// // };\n\n// // john.__proto__ = soldier;// метод устарел\n\n// console.log(john);// тут будет только health\n\n// console.log(john.armor);// а сейчас он покажет свойство прототипа\n// console.log(john.sayHello);// джон тожеумеет говорить привет как и любой солдат\n\n// Object.setPrototypeOf(john, soldier);// нормальный новый способ установить прототип к уже созданному объекту\n\n\n\n\n\n//Lesson 24 пратика Используем объекты\n\n/* Задание на урок:\n\n1) У нас уже есть рабочее приложение, состоящее из отдельных функций. Представьте, что\nперед вами стоит задача переписать его так, чтобы все функции стали методами объекта personalMovieDB\nТакое случается в реальных продуктах при смене технологий или подхода к архитектуре программы\n\n2) Создать метод toggleVisibleMyDB, который при вызове будет проверять свойство privat. Если оно false - он\nпереключает его в true, если true - переключает в false. Протестировать вместе с showMyDB.\n\n3) В методе writeYourGenres запретить пользователю нажать кнопку \"отмена\" или оставлять пустую строку. \nЕсли он это сделал - возвращать его к этому же вопросу. После того, как все жанры введены - \nпри помощи метода forEach вывести в консоль сообщения в таком виде:\n\"Любимый жанр #(номер по порядку, начиная с 1) - это (название из массива)\"*/\n\n\n// мой вариант:\n\n\n// const personalMovieDB = {\n//     count: 0,\n//     movies: {},\n//     actors: {},\n//     genres: [],\n//     privat: true,\n//     start: function () {\n\n//         personalMovieDB.count = +prompt('Сколько фильмов вы уже посмотрели?', ''); // теперь записываем сразу в ебало\n\n//         while (personalMovieDB.count == '' || personalMovieDB.count == null || isNaN(personalMovieDB.count)) {\n//             personalMovieDB.count = +prompt('Сколько фильмов вы уже посмотрели?', '');\n//         }\n//     },\n//     rememberMyFilms: function () {\n//         for (let i = 0; i < 2; i++) {\n//             const a = prompt('Один из последних просмотренных фильмов?', ''),\n//                 b = prompt('На сколько оцените его?', '');\n\n//             if (a != null && b != null && a != '' && b != '' && a.length < 50) {\n//                 personalMovieDB.movies[a] = b;\n//                 console.log('done');\n//             } else {\n//                 console.log('error');\n//                 i--;\n//             }\n//         }\n//     },\n//     detectPersonalLevel: function () {\n//         if (personalMovieDB.count < 10) {\n//             alert('Просмотрено довольно мало фильмов');\n//         } else if (personalMovieDB.count < 30) {\n//             alert('Вы классический зритель');\n//         } else if (personalMovieDB.count >= 30) {\n//             alert('Вы киноман');\n//         } else {\n//             console.log('Произошла ошибка');\n//         }\n//     },\n//     showMyDB: function (hidden) {\n//         if (!hidden) {\n//             console.log(personalMovieDB);\n//         }\n//     },\n//     writeYourGenres: function () { // можно еще записать через split и for c одной итерацией\n//         for (let i = 1; i <= 3; i++) {\n//             personalMovieDB.genres[i - 1] = prompt(`Ваш любимый жанр под номером ${i}`);\n//             if (personalMovieDB.genres[i - 1] == '' || personalMovieDB.genres[i - 1] === null) {\n//                 alert('Не оставляй пустую строку');\n//                 i--;\n//             }\n//         }\n//         personalMovieDB.genres.forEach(function (item, i, arr) {\n//             console.log(`Любимый жанр #${i+1} - это ${item}`);\n//         });\n//     },\n// вариант из урока\n// writeYourGenres: function() {\n//     for (let i = 1; i < 2; i++) {\n//         let genre = prompt(`Ваш любимый жанр под номером ${i}`);\n\n//         if (genre === '' || genre == null) {\n//             console.log('Вы ввели некорректные данные или не ввели их вовсе');\n//             i--;\n//         } else {\n//             personalMovieDB.genres[i - 1] = genre;\n//         } \n\n// Альтернативный вариант из урока\n\n// let genres = prompt(`Введите ваши любимые жанры через запятую`).toLowerCase();\n\n// if (genres === '' || genres == null) {\n//     console.log('Вы ввели некорректные данные или не ввели их вовсе');\n//     i--;\n// } else {\n//     personalMovieDB.genres = genres.split(', ');\n//     personalMovieDB.genres.sort();\n// } \n// }\n\n// personalMovieDB.genres.forEach((item, i) => {\n//     console.log(`Любимый жанр ${i + 1} - это ${item}`);\n// });\n// }\n// toggleVisibleMyDB: function () {\n//     if (personalMovieDB.privat) { // === true здесь прописывать не обязательно\n//         personalMovieDB.privat = false;\n//     } else {\n//         personalMovieDB.privat = true;\n//     }\n// }\n\n\n// };\n\n// personalMovieDB.toggleVisibleMyDB();\n\n// personalMovieDB.showMyDB(personalMovieDB.privat);\n\n// personalMovieDB.writeYourGenres();\n\n\n\n\n\n//Lesson 25 отлавливаем ошибки в коде при помощи консоли разработчика.Breakpoints\n\n//В консоли есть вкладка sources там можно посмотреть структуру документа и найти баги в коде\n//там есть кнопки прокрутки которые могут показать как работают функции пошагово\n// учить бесполезно все прийдет с опытом\n// ключевое слово debugger делает брейкпоинт для консоли разработчика\n// Короче пока нихуя не понятно\n\n\n//Lesson 26 Динамическая типизация в JS\n\n// Динамическая типизация это возможность одного типа данных превращаться в другой\n\n\n// To string\n\n//1)\n// console.log(typeof(String(null)));// выдаст строку а не налл\n// console.log(typeof(String(4)));// тоже выдаст строку а не число\n\n//2) конкретинация сложение чего либо со строкой\n\n// console.log(typeof(null + '')); // выдаст строку а не налл\n\n\n// const num = 5;\n\n// console.log(\"https://vk.com/catalog/\" + num);// получим строку при сложении с числом\n\n// const fontSize = 26 + 'px';\n\n//To number\n\n// 1)\n\n// console.log(typeof(Number('4')));// выдаст намбер \n\n// 2 Унарный плюс \n\n// console.log(typeof(+\"5\")); // тоже выдаст число \n\n// 3\n// console.log(typeof(parseInt('15px', 10)));// в десятичную систему\n\n// let answer = +prompt(\"Hello\", \"\");\n\n\n//кстати все что мы получаем от пользователя будет строкой\n\n\n// To boolean\n\n// всегда ложь 0, \"\", null, undefined, NaN\n\n// 1)\n// let switcher = null;\n\n// if (switcher){// сюда зайдет false \n//     console.log('Working...');\n// }\n\n// switcher = 1;\n\n// if (switcher){// сюда зайдет true \n//     console.log('Working...');\n// }\n\n\n\n// // 2)\n\n// console.log(typeof(Boolean('4')));// выдаст правду\n\n\n// // 3)\n\n// console.log(typeof(!!'44444')); // два знака отрицания дают тип boolean как унарный плюс дает тип намбер\n\n\n\n//lesson 27 задачи с собеседований на понимание основ\n\n// Какое будет выведено значение: let x = 5; alert( x++ ); ?  --- 5 \n/// тут инкремент после пятерки поэтому сначала выдается пятерка а только потом увеличивается\n\n// Чему равно такое выражение: [ ] + false - null + true ? --- NaN\n/// когда мы работем с пустым массивом он первращается в пустую строку \"\" а если к пустой строке прибавить что то то это будет все равно строка\n/// если вычесть из строки булиновое значение то получится NaN и если довабить еще одно тру товсе равно будет NaN\n\n// Что выведет этот код: let y = 1; let x = y = 2; alert(x); ? --- 2\n/// тут код идет справа налево. последовательное присваивание\n\n// Чему равна сумма [ ] + 1 + 2?  --- \"12\"\n/// пустой массив складывается с другими типами данных\n\n// Что выведет этот код: alert( \"1\"[0] )? --- хз /// 1\n/// тут мы обращаемся к строке как к массиву и вызываем первый символ\n\n// Чему равно 2 && 1 && null && 0 && undefined ? --- null\n// оператор && будет запинаться на лжи и выдает null\n\n// Есть ли разница между выражениями? !!( a && b ) и (a && b)? ---- да /// нихуя.это разные вещи\n///Оператор && возвращает первый из операндов, значение которого приводится к логическому false. \n///Если же оба операнда приводятся к true, то оператор && вернет последний операнд.\n/// так что будет сравниваться булин true и результат &&\n\n// Что выведет этот код: alert( null || 2 && 3 || 4 ); ? ---- 3\n/// Тут еще надо смотреть таблицу приоритетов операторов у && приоритет выше так что он будет выполняться раньше ||\n///null это фолс/ 2&&3 это 3/ а 3 это тру/ тру выдает || если оно ему попадается / так что ответ 3 \n/// если не понятно дальше написано как работает || и &&\n\n// a = [1, 2, 3]; b = [1, 2, 3]; Правда ли что a == b ? ----  нет\n///это 2 хранилища информации которые просто хранят одинаковые данные но они не равны\n\n// Что выведет этот код: alert( +\"Infinity\" ); ? ---- плюс бесконечность как число\n\n// Верно ли сравнение: \"Ёжик\" > \"яблоко\"? ---- нихуя \n/// тут сравнивается посимвольно по юникоду еще ис регистром.сравниваются коды в таблице\n\n// Чему равно 0 || \"\" || 2 || undefined || true || falsе ? ---- 2\n///Оператор || возвращает первый из операндов, значение которого может быть приведено к логическому true.\n/// Если же оба операнда приводятся к логическому false, то оператор || вернет последнее значение.\n\n\n\n//  Lesson28 получение элементов со страницы\n\n//DOM - объектная модель документа\n\n// const box = document.getElementById('box');// получить элемент из документа по айдишнику\n// console.log(box);// в браузере выдаст этот элемент\n\n// const btns = document.getElementsByTagName(\"button\");// выдает псевдомассив всех элементов баттон по тэгу\n// const btn = document.getElementsByTagName(\"button\")[1];// получить только вторую кнопку\n\n// console.log(btns[2]);// получить конкретный элемент из коллекции\n\n// если элемент один на странице то все равно getElementsByTagName дает массив\n\n// const circles = document.getElementsByClassName('circle');// получить элементы через класс выдаст коллекцию тоже если даже один походу\n\n\n// const hearts = document.querySelectorAll('.heart');// крутая штука сюда можно добавить любой css селектор. Получим HTML коллекцию с методом ForEach\n\n// hearts.forEach( item => {// выдаст все 3 элемента в консоль\n//     console.log(item);\n// });\n\n// const oneHeart = document.querySelector(\".heart\");// выдаст один элемент - первый подходящий по этому запросу\n\n\n// Lesson 29 Действия с элементами на странице\n\n// const box = document.getElementById('box'),\n//       btns = document.getElementsByTagName('button'),\n//       circles = document.getElementsByClassName('circle'),\n//       wrapper = document.querySelector(\".wrapper\"),\n//       hearts = document.querySelectorAll(\".heart\"),\n//       oneHeart = wrapper.querySelector(\"heart\");// не обязательно искать через document\n\n// console.dir(box);// посмотреть на элемент как на объект\n//тут можно менять инлайн стили(которые в html)\n// box.style.backgroundColor = 'blue';\n// box.style.width = '500px';\n\n// box.style.cssText = \"background-color:blue; width: 500px;\";// тут можно писать прям css код\n\n// btns[1].style.borderRadius = \"50%\";\n\n//circles.style.backgroundColor = \"red\";// не сработает потому что к массиву обращаемся а не к объекту\n// circles[1].style.backgroundColor = \"red\";\n\n// for( let i = 0; i < hearts.length; i++){// можно менять свойства для нескольких элементов через такой цикл\n//     hearts[i].style.backgroundColor = 'blue';\n// }\n\n// hearts.forEach(item =>{/// этот способ лучше для изменения нескольких элементов ноработет только с document.querySelectorAll\n//     item.style.backgroundColor = 'blue';\n// });\n\n\n// const div = document.createElement('div');// сохраняет элемент внутри JSного файла. В круглых скобках название тега\n\n// const text = document.createTextNode('Тут был я');// текстовые узлы. элементы без оболочки тега. исп редко\n\n// div.classList.add('black');//ДОБАВЛЯЕМ КЛАСС К ЭЛЕМЕНТУ.КЛАСС УЖЕ СОЗДАН В СSS\n\n\n//document.body.append(div);// добавляем наш див в конец бади в сам html\n//wrapper.appendChild(div);// более устаревший метод добавить в конец родителя\n// wrapper.append(div);// добавляем наш див c классом black в конец элемента с классом wrapper\n//wrapper.prepend(div);// в начало элемента\n// hearts[0].before(div);// перед первым сердечком\n//hearts[1].after(div);// после второго сердечка\n\n// wrapper.insertBefore(div, hearts[0]);// более старый метод добавления перед вскобках написано что вставлять и куда\n\n//circles[0].remove();// удалить элемент\n//wrapper.removeChild(hearts[1]);// старый метод удаления тут надо задавать родителя\n\n//hearts[0].replaceWith(circles[0]);//заменить на\n//wrapper.replaceChild(circles[0], hearts[0]);// старый способ тут надо задавать родителя тот элемент на который меняем и тот элемент который меняется\n\n\n// div.innerHTML = '<h1>Hello world</h1>';// записать HTML в элемент. Но можно въеьаться и дать возможность пользователю управлять содержанием страницы\n\n\n//div.textContent = \"Hello\"; // работет только на текст\n\n\n//Вставляем кусок HTML кода перед или после определенных тегов// тут походу не переписываем как в innerHTML но есть еще +=\n// div.insertAdjacentHTML('beforebegin', '<h2>Hello</h2>');//перед элементом\n// div.insertAdjacentHTML('afterbegin', '<h2>Hello</h2>');// в начало элемента\n// div.insertAdjacentHTML('beforeend', '<h2>Hello</h2>');// в конец \n// div.insertAdjacentHTML('afterend', '<h2>Hello</h2>');// после элемента\n/// элемент.insertAdjacentHTML('ключевое слово', 'код');\n\n\n//Lesson 30 Практика.Действия со страницей\n/* Задания на урок:\n\n1) Удалить все рекламные блоки со страницы (правая часть сайта)\n\n2) Изменить жанр фильма, поменять \"комедия\" на \"драма\"\n\n3) Изменить задний фон постера с фильмом на изображение \"bg.jpg\". Оно лежит в папке img.\nРеализовать только при помощи JS\n\n4) Список фильмов на странице сформировать на основании данных из этого JS файла.\nОтсортировать их по алфавиту \n\n5) Добавить нумерацию выведенных фильмов */\n\n\n// const movieDB = {\n//     movies: [\n//         \"Логан\",\n//         \"Лига справедливости\",\n//         \"Ла-ла лэнд\",\n//         \"Одержимость\",\n//         \"Скотт Пилигрим против...\",\n//         'Аватар',\n//         'Терминатор'\n\n//     ]\n// };\n\n// const movieDBSorted = movieDB.movies.sort();\n// const films = document.querySelectorAll('.promo__interactive-item');\n// const filmsList = document.querySelector('.promo__interactive-list');\n// const div = document.createElement('div');\n// div.classList.add('delete');\n\n// console.log(div);\n\n// console.log(movieDBSorted);\n\n// document.querySelector('.promo__adv').remove();\n// document.querySelector('.promo__content').style.cssText = \"width: calc(100% - 300px);\";\n\n// document.querySelector('.promo__genre').textContent = \"драма\";\n\n// document.querySelector('.promo__bg').style.cssText = \"background-image: url(img/bg.jpg);\";\n\n\n\n// for( let i = 0; i < films.length; i++){// первый вариант\n//     films[i].textContent = movieDBSorted[i];\n//     films[i].insertAdjacentHTML('beforeend', '<div class=\"delete\"></div>');\n//     films[i].insertAdjacentHTML('afterbegin', `${i+1}. `);\n//  }\n\n\n// и второй вариант сука сосать\n// films.forEach(item =>{\n//     item.remove();\n// });\n\n//или использовать для filmsList innerHTML но с пустой строкой\n\n// for( let i = 0; i < movieDBSorted.length; i++){\n//   const li = document.createElement('li');\n//   const div = document.createElement('div');\n//    li.classList.add('promo__interactive-item');\n//    div.classList.add('delete');\n//    filmsList.append(li);\n//    li.append(div);\n//    li.insertAdjacentHTML('afterbegin', `${i+1}. ${movieDBSorted[i]} `);\n\n\n// }\n\n//можно еще сделать через forEach innerHTML. вариант из курса толтко у него тут movieList \n//movieList.innerHTML = \"\";\n//console.log(poster.innerHTML); // тут просто выдается код а не перезаписывается\n\n//movieDB.movies.forEach((film, i) => {\n//     movieList.innerHTML += `// += это тоже самое что  movieList.innerHTML + .... \n//Оператор: x += y \n//Значение: x = x + y\n//     // если + перед = не будет то он каждый раз будет просто перезаписывать первый цикл\n//         <li class=\"promo__interactive-item\">${i + 1} ${film}\n//             <div class=\"delete\"></div>\n//         </li>\n//     `;\n// });\n\n\n\n\n\n\n//Урок 31 События и их обработчики\n\n//Событие- это сигнал от браузера о том что что то произошло\n\n//Обработчик события - это функция которая срабатывает как только какое то событие произошло\n\n// 3 способа назначить обработчики событий\n\n// прям в HTML в ебало никто не пишет\n\n// 2 способ но тут если мы назначим обработчик дважды то он перезапишется\n//  const btn = document.querySelector('button'),\n//        overlay = document.querySelector('.overlay');\n\n// btn.onclick = function() {\n//     alert('Пошел нахуй');\n//     console.log('Click');\n// };\n\n\n//Теперь как правильно назначать обработчик.\n\n// btn.addEventListener('click', () => { // первый аргумент это название события а второй это колбек функция(обработчик) а третьим аргументом можно добавлять опции\n//     alert(\"Click\");\n// } ); \n\n// btn.addEventListener('click', () => { // Этот неперезаписывается и выполняет по порядку\n//     alert(\"Second click\");\n// } ); \n\n// btn.addEventListener('click', (e) => { // объект - событие передается первым в аргументы \n//     console.log('Hover');\n//    console.log(e.target);// сразу получаем доступ к этому элементу если происходит заданное событие\n//     e.target.remove();\n// }); \n\n//События в джаваскрипте выполняются в порядке очереди\n\n\n\n\n\n// let i = 0;\n\n// const deleteElement = (e) => {\n//     console.log(e.target);// тут 2раза выдаст баттон если ткнуть в кнопку.Используется чаще\n//console.log(e.currentTarget);//сука как объяснить самому себе разницу. а тут выдаст сначала баттон потом див \n//console.log(e.type);\n// i++;//событие сработает 1 раз и удалится:\n// if (i===1) {\n//     btn.removeEventListener('click',deleteElement);// удалить обработчик\n// }\n// };\n\n//btn.addEventListener('click', deleteElement);// назначить обработчик\n// то же самое что и код выше но с переменной и возможностью удалить именно этот ивентлистенер\n//overlay.addEventListener('click', deleteElement);// вешаем обработчик на обертку\n//всплытие событий - если одинаковое  событие примененно к вложенным друг в друга \n//элементам то сначала применяется к вложенному элементу и после поднимается выше по иерархии\n\n\n// const link = document.querySelector('a');// сначала получаем элемент\n// link.addEventListener('click', function(event){\n//     event.preventDefault();// отмена стандартного поведения браузера\n//     console.log(event.target);\n// })\n\n\n\n\n// чтобы повесить обработчики событийна несколько элементов то надо перебрать массив через фоич например\n\n// const btns = document.querySelectorAll('button');\n\n// btns.forEach(btnItem =>{\n//     btnItem.addEventListener('click', deleteElement, {once: true});// тут есть третий аргумент once. Обработчик сработает только 1 раз\n// });\n\n\n\n\n//Урок 32 Навигация по DOM элементам дата атрибуты преимущество фор и оф\n// Сразу пишу что нода это строка кода перенос строки или элемент\n\n// console.log(document.body);\n// console.log(document.documentElement);// выведет весь HTML\n// console.log(document.body.childNodes);// выдаст псевдомассив детей бади text в этом массиве это перенос строки\n\n//нужно различать ДОМ узлы и дом элементы узел мы можем его не видеть\n\n\n// console.log(document.body.firstChild); // тут это перенос строки\n// console.log(document.body.firstElementChild);// а тут уже именно элемент первый\n// console.log(document.body.lastChild);// тут это скрипт\n// console.log(document.body.lastElementChild);\n\n\n// console.log(document.querySelector('#current').parentNode);// получить ноду родителя\n//console.log(document.querySelector('#current').parentElement);// получить родительский элемент\n// console.log(document.querySelector('#current').parentNode.parentNode);// получить прародителя\n\n// в HTML5 можно добавлять атрибуты data-чтото=\"3 или true\"\n\n// console.log(document.querySelector('[data-current=\"3\"]'));//получить залупу\n// console.log(document.querySelector('[data-current=\"3\"]').nextSibling); // получить то что за залупой но тут выдаст перенос строки потому что эта хрень выдает узлы или текстовые ноды\n// console.log(document.querySelector('[data-current=\"3\"]').previousSibling);// нода перед \n// нода это хз что то вроде строки кода но можетбытьпустойстрокой\n\n//C чайлднодс нет фишек с элементами поэтому ее надо делать вручную\n//Естьслучаи когдамы неможемиспользовать forEach\n// for of может использовать брейк и континью\n\n// for(let node of document.body.childNodes){// так мы получим все ноды но без перносов строк\n//     if(node.nodeName == '#text'){// это он подсмотрел в браузере в свойствах собъекта\n//         continue;\n//     }\n//     console.log(node);\n// }\n\n\n\n\n\n//Урок 33 Используем события \n/* Задания на урок:\n\n1) Реализовать функционал, что после заполнения формы и нажатия кнопки \"Подтвердить\" - \nновый фильм добавляется в список. Страница не должна перезагружаться.\nНовый фильм должен добавляться в movieDB.movies.\nДля получения доступа к значению input - обращаемся к нему как input.value;\nP.S. Здесь есть несколько вариантов решения задачи, принимается любой, но рабочий.\n\n2) Если название фильма больше, чем 21 символ - обрезать его и добавить три точки\n\n3) При клике на мусорную корзину - элемент будет удаляться из списка (сложно)\n\n4) Если в форме стоит галочка \"Сделать любимым\" - в консоль вывести сообщение: \n\"Добавляем любимый фильм\"\n\n5) Фильмы должны быть отсортированы по алфавиту */\n\n\n// Возьмите свой код из предыдущей практики\n\n\n// let movieDB = {\n//     movies: [\n//         \"Логан\",\n//         \"Лига справедливости\",\n//         \"Ла-ла лэнд\",\n//         \"Одержимость\",\n//         \"Скотт Пилигрим против...\"\n//     ]\n// };\n\n\n\n\n\n\n// const adv = document.querySelectorAll('.promo__adv img'),\n//     poster = document.querySelector('.promo__bg'),\n//     genre = poster.querySelector('.promo__genre'),\n//     movieList = document.querySelector('.promo__interactive-list');\n\n// adv.forEach(item => {\n//     item.remove();\n// });\n\n// genre.textContent = 'драма';\n\n// poster.style.backgroundImage = 'url(\"img/bg.jpg\")';\n\n\n\n\n// // ну поехали\n\n// movieDB.movies.forEach((item,i) => {// всю муви дб делаем в ловер кейс чтобы не сбивалась сортировка\n//     movieDB.movies[i] = item.toLowerCase();\n// });\n\n\n// const reWriteMovieList = function () {// делаем большую функцию\n//     movieList.innerHTML = \"\"; // переписываем список как в прошлом задании\n//     const movieDBSorted = movieDB.movies.sort();//сортируем мувис и делаем новую переменную\n\n\n\n//     movieDBSorted.forEach((film, i) => {// на каждый элемент списка создаем текст HTML += делает так чтобы код не перезаписывался\n//         movieList.innerHTML += `\n//         <li class=\"promo__interactive-item\">${i + 1} ${film}\n//             <div class=\"delete\"></div>\n//         </li>\n//     `;\n//     });\n\n//     const delBtns = document.querySelectorAll('.delete');//получаем каждую мусорку\n\n//     delBtns.forEach( (item,i) => {// вешаем обработчик на каждую мусорку\n\n//     item.addEventListener('click', function (event) {// при клике произойдет следущее\n//        const delIndex = +item.parentElement.textContent.slice(0, 1) - 1;// через жопу получаю индекс из текста в HTML\n//        movieDB.movies.splice(delIndex, 1);// загуглил метод который вырезает по индксу из списка\n//        reWriteMovieList();//вызываю перезаписыватель из списка \n\n//     });\n\n// });\n\n// };\n\n// reWriteMovieList();//при загрузке страницы сразу вызываю перезаписыватель который все пронумерует,просортирует и повесит обработчики\n\n// // теперь кнопка \n// const btn = document.querySelector('.add button'); // сначала получаем элемент\n\n// btn.addEventListener('click', function (event) {\n//     event.preventDefault(); // отмена стандартного поведения браузера\n//     const inputValue = document.querySelector('.adding__input').value;// получаем значение инпута\n//     inputValue.toLowerCase();// данные от юзера тоже надо в ловеркейс \n//     if (inputValue.length > 21) { //длина члена\n//         const inputValueSliced = inputValue.slice(0, 21) + '...';// если член длиннее 21 то он обрезается\n//         movieDB.movies.push(inputValueSliced);// запихиваем обрезанный член в список\n//     } else {\n//         movieDB.movies.push(inputValue);// необрезанный фильм короче 21\n//     }\n\n//     reWriteMovieList();// рерайтим\n\n//     document.querySelector('.adding__input').value = ''; // опустошаем инпут\n\n//     const chBox = document.querySelector('[type=\"checkbox\"]');/// получаем чекбокс в переменнную\n\n//     if (chBox.checked){// проверяем на чекнутость. тут выдает либо тру либо фолс\n//         console.log(`Добавляем любимый фильм`);\n//     }\n\n//     chBox.checked = false;// при нажатии накнопку чекбокс опустошится\n//     });\n\n\n\n\n\n// с мусорной корзиной ахаха охуеть получилось \n\n\n// теперь как сделали в уроке\n\n// document.addEventListener('DOMContentLoaded', () => {// ждем загрузки всего документа но без изображений а лишь потом запускаем код\n\n//     const movieDB = {\n//         movies: [\n//             \"Логан\",\n//             \"Лига справедливости\",\n//             \"Ла-ла лэнд\",\n//             \"Одержимость\",\n//             \"Скотт Пилигрим против...\"\n//         ]\n//     };\n/// получил все знчения в начале\n// const adv = document.querySelectorAll('.promo__adv img'),\n//     poster = document.querySelector('.promo__bg'),\n//     genre = poster.querySelector('.promo__genre'),\n//     movieList = document.querySelector('.promo__interactive-list'),\n//     addForm = document.querySelector('form.add'),\n//     addInput = addForm.querySelector('.adding__input'),\n//     checkbox = addForm.querySelector('[type=\"checkbox\"]');\n\n// addForm.addEventListener('submit', (event) => {// повесил вункцию на форму а не на инпут\n//     event.preventDefault();\n\n//     let newFilm = addInput.value;//получил значения инпута\n//     const favorite = checkbox.checked;// значение чекбокса\n\n//     if (newFilm) {// тут если просто нажимается кнопка и ничего не написано то ничего непроисходит\n\n//         if (newFilm.length > 21) {// проверка на длину инпута\n//             newFilm = `${newFilm.substring(0, 22)}...`;// сабстринг вроде то же самое что и слайс \n//         }\n\n//         if (favorite) {// проверка чекбокса\n//             console.log(\"Добавляем любимый фильм\");\n//         }\n\n//         movieDB.movies.push(newFilm);// запихиваем в список\n//         sortArr(movieDB.movies);// сортируем список\n\n//         createMovieList(movieDB.movies, movieList);// вызывает функцию по перезаписи HTML\n//     }\n\n//     event.target.reset();//вот так можно ресетить форму\n\n// });\n// тут он оборачивает все  в функции с аргументами\n//     const deleteAdv = (arr) => {\n//         arr.forEach(item => {\n//             item.remove();\n//         });\n//     };\n\n//     const makeChanges = () => {\n//         genre.textContent = 'драма';\n\n//         poster.style.backgroundImage = 'url(\"img/bg.jpg\")';\n//     };\n\n//     const sortArr = (arr) => {\n//         arr.sort();\n//     };\n\n//     function createMovieList(films, parent) {\n//         parent.innerHTML = \"\";\n//         sortArr(films);\n\n//         films.forEach((film, i) => {\n//             parent.innerHTML += `\n//                 <li class=\"promo__interactive-item\">${i + 1} ${film}\n//                     <div class=\"delete\"></div>\n//                 </li>\n//             `;\n//         });\n\n//         document.querySelectorAll('.delete').forEach((btn, i) => {// вешает обработчик накаждую мусорку\n//             btn.addEventListener('click', () => {\n//                 btn.parentElement.remove();\n//                 movieDB.movies.splice(i, 1);// хитрый пидр сделал как я но индекс отпросто взял из i а я задрачивался\n\n//                 createMovieList(movieDB.movies, movieList);// это типо рекрсия но ты сам догадался\n//             });\n//         });\n//     }\n\n//     deleteAdv(adv);\n//     makeChanges();\n//     createMovieList(movieDB.movies, movieList);\n\n// });\n\n\n\n\n\n\n\n\n\n// Lesson 34 События на мобильных устройствах \n\n\n\n\n\n// используется например на сладерах\n// touchstart начало касания\n// touchmove движение с касанием\n// tochend отрыв пальца\n// tochenter как ховер только с пальцем\n// touchleave когда ховер с пальцем выходят за пределы элемента\n// touchcansel когда палец выходит за пределы браузера\n\n// window.addEventListener(\"DOMContentLoaded\", () =>{\n//     const box = document.querySelector('.box');\n\n//     box.addEventListener('touchstart', (e) => {\n//         console.log('start');\n//         console.log(e.touches);// дает объект в котором есть количество пальцев  \n//     });\n\n//     box.addEventListener('touchmove', (e) => {\n//         console.log(e.targetTouches[0].pageX);// тут обратились к первому пальцу и вывели координаты по иксу\n//         // тут например можно прикрутить к слайдеру\n//     });\n\n//     box.addEventListener('touchend', (e) => {\n//         console.log('end');\n//     });\n// });\n\n\n\n//e.touches объект спальцами Touchlist \n//e.targetTouches все пальцыкоторые взаимодействуют с этим элементом\n//e.changedTouches список пальцев которые участвуют в текущем событии\n// это походу чтобы реализовывать щепотку и подобные\n\n\n\n\n//Lesson 35 Async defer и динамические скрипты\n\n//HTML страница загружается сверху вниз \n//если скрипт повесить наверх то могут быть ошибки\n// но если слабый инет и много верстки то будут проблемы с загрузкой\n//Есть HTML атрибут defer для скрипта который находится в HTML наверху\n// defer - сообщает браузеру чтобы он загружал скрипт в фоновом режиме\n// скрипты с таким атрибутом срабатывают после загрузки страницы и теперь скрипты можно засовывать даже в башку\n\n\n//async тут скрипты не ждут ничего и загружаются как только до него дойдет страница и запускается сразу после загрузки асинхронность нужна к примеру для метрик\n\n//такие скрипты загружаются как async если не присвоен фолс\n\n// function loadScript(src) {\n//     const script = document.createElement('script'); //создаем скрипт в JS который будет динамически загружаться\n//     script.src = src; // Подписываем ему атрибут src\n//     script.async = false; // так скрипт будет вести себя как обычный. Ассинхронность отключена\n//     document.body.append(script); //добавляем его в документ\n\n// }\n\n// loadScript('js/test.js');\n// loadScript('js/some.js');\n\n\n// такой подход гарантируетпоследовательную загрузку динамических скриптов\n\n\n\n\n//Lesson 37 ClassList и делегироваие событий\n// верстку он сюда не прикрепил так что если что смотри по видосу\n// const btns = document.querySelectorAll('.button');\n// const wrapper = document.querySelector(\".btn-block\");// получаем родителя всех кнопок\n// console.log(btns[0].classList.length);// выдаст количество классов\n//console.log(btns[0].classList.item(0));// получить класс который распологается под определенным индексом\n// console.log(btns[0].classList.add('one__class', 'other__class'));// добавить класс\n// console.log(btns[1].classList.remove('red'));// убрать класс\n// console.log(btns[0].classList.toggle('red'));// тогглим. убираем или добавляем класс в зависимости от его наличия\n\n\n// if(btns[1].classList.contains('red')) {// сделать что то если у второй кнопки есть класс ред\n//     console.log('red');\n// }\n\n// btns[0].addEventListener('click', () => {// похожее на гамбургер поведение\n//     // if (!btns[1].classList.contains('red')){\n//     //     btns[1].classList.add('red');\n//     // } else {\n//     //     btns[1].classList.remove('red');\n//     // }\n\n//     btns[1].classList.toggle('red');// тоггл это то же самое\n// });\n\n// // console.log(btns[0].className);//устарело дает строку классов\n\n// // ща будет про делегирование где мы назначаем функцию для потомков а не вешаем обработчик накаждый элемент\n// // вспоминаем практикум с мусорками\n\n// wrapper.addEventListener('click', (event) => {// вешаем обработчик на родителя // теперь клик на родителя не работает но работает клик на любую кнопку\n//     console.dir(event.target);// тутможно посмотреть на таргт клика как на объект. Там будет показано tagName: 'BUTTON'\n//     if (event.trarget && event.target.tagName == \"BUTTON\") {// в HTML структуре не все элементы поддерживаютсобытие клика не заморачивайся\n//         console.log('hello');\n\n//     }\n// });\n\n// const btn = document.createElement('button');// теперь динамически добавленные кнопки тоже поддерживают это событие\n// btn.classList.add('red');\n// wrapper.append(btn);\n\n// //но если через обычный перебор добавить обработчик то динамические кнопки не сработают прям как с мусорками\n\n\n\n\n// wrapper.addEventListener('click', (event) => {// вешаем обработчик на родителя\n//     console.dir(event.target);\n//     if (event.trarget && event.target.classList.contains('blue')) {// можно добавлять и другие условия для делегирования\n//         console.log('hello');\n\n//     }\n// });\n\n// wrapper.addEventListener('click', (event) => {// вешаем обработчик на родителя\n//     console.dir(event.target);\n//     if (event.trarget && event.target.matches('button.red')) {// тут указываются селекторы \n//         console.log('hello');\n\n//     }\n// });\n\n\n\n\n\n\n//Lesson 38 Создаем табы в новом проекте\n\n/// 3 задачи\n//функция которая скрывает ненужные табы\n//Показать нужные табы\n//назначить обработчики событий на нужные кноки\n\n// window.addEventListener('DOMContentLoaded', function() {\n\n//     // Tabs\n\n// \tlet tabs = document.querySelectorAll('.tabheader__item'),\n// \t\ttabsContent = document.querySelectorAll('.tabcontent'),\n// \t\ttabsParent = document.querySelector('.tabheader__items');\n\n// \tfunction hideTabContent() {\n\n//         tabsContent.forEach(item => {// скрываем табы\n//             item.classList.add('hide');// выдаем нужные классы \n//             item.classList.remove('show', 'fade');// тоггл кстати тут нельзя использовать\n//         });\n\n//         tabs.forEach(item => {//убираеем класс active укаждого таба\n//             item.classList.remove('tabheader__item_active');\n//         });\n// \t}\n\n// \tfunction showTabContent(i=0) {// показать табы i=0 значитчто если функция вызывается без аргумента топо умолчанию выставится значение которое указано\n//         tabsContent[i].classList.add('show', 'fade');\n//         tabsContent[i].classList.remove('hide');\n//         tabs[i].classList.add('tabheader__item_active');\n//     }\n\n//     hideTabContent();\n//     showTabContent();\n\n// \ttabsParent.addEventListener('click', function(event) {// делегирование через родителя на все кнопки справа\n// \t\tconst target = event.target;// чтобы постоянноне писать евент.таргет\n// \t\tif(target && target.classList.contains('tabheader__item')) {// тут проверка содержание класса внутри родителя определяем что мы точно кликнулив таб\n//             tabs.forEach((item, i) => {// надо определить номер таба чтобы знать какой показывать\n//                 if (target == item) {// если кликнутый таб равен перебераемому то вызываем функции\n//                     hideTabContent();// прячем все табы\n//                     showTabContent(i);// показваем тот который совпал с кликаемым\n//                 }\n//             });\n// \t\t}\n// \t});\n// });\n\n\n\n\n\n\n\n\n//Урок 39 Время выполнения скриптов\n\n// const timerId = setTimeout(function (text){\n//     console.log(text)\n// }, 20000,'hello');// время ставится в милисекундах первый аргумент функции setTimeout  это что произойдет а второйаргумент это отсрочка \n// // третий аргумент это то что передается в заданную функцию\n\n\n// const timerId2 = setTimeout(logger, 2000, \"Hello\");// первым аргументом можно передавать готовую функцию\n\n\n// function logger (text) {\n//     console.log(text);\n\n// }\n\n\n// setTimeout(logger, 20000,'hello');// сработает и без переменной\n\n// clearInterval(timerId);// тут мы сбрасываем таймер но обращаемся по переменной он работает и на разовые таймеры и на интервалы \n\n// const btn = document.querySelector('.btn');\n\n\n// let timerId3;// глобальная переменная которуюможно будет использовать в клеар интервал\n// btn.addEventListener('click', () => {//счетчик пойдет после клика на кнопку \n//     // const timerId = setTimeout(logger,2000);\n//     const timerId3 = setInterval(logger, 2000);\n\n// });\n\n\n\n// clearInterval(timerId3);//используемая переменная должна бытьзадана глобально чтобысработать а не локально внутри функции\n// но клеар интервал не будет работать пока он идет в потоке синхронного кода\n\n// let i = 0; // чтобы посчитать сколько раз уже повторился сет интервал\n\n\n// function logger () {\n//     if(i === 3) {\n//         clearInterval(timerId3);// если logger выполнится 3 раза то сработает клеар интервал\n//     }\n//     console.log('text');\n//     i++;\n\n// }\n\n//рекурсивный сет таймаут это значит что внутри себя он сам себя запускает\n//но еслик примеру функция делается 3 секунда а интервал 0,5 то интервала не будет он уже пройдет\n\n// let id =  setTimeout(function log () {// работает так же как и сет интервал функциябудет дожидатьсявыполнения действий потом ждать назначенное время и запускаться снова даже если функция выполняется 30 секунд\n//     console.log('Hello');\n//     id = setTimeout(log,500);\n// }, 500);\n\n\n//Делаем анимацию\n\n//синий квадратик перемещается в правый нижний угол \n\n// function myAnimation() {\n//     const elem = document.querySelector('.box');\n//     let pos = 0;\n//     const id = setInterval(frame,10);//двигаем квадратик каждые 10мс\n//      function frame () {\n//          if(pos == 300){// конечное значение когда анимация останавливается\n//              clearInterval();\n//          } else {\n//              pos++;\n//              elem.style.top = pos + \"px\";\n//              elem.style.left = pos + \"px\";\n//          }\n//      }\n// }\n\n// btn.addEventListener('click', myAnimation); // при клике на кнопку запустится анмация\n\n\n// //в цссе делайанимации и не веебывайся потом прилепишь класс\n\n\n\n\n\n\n\n\n// Урок40  работа с датами\n\n// let now = new Date(); // покажет текущую дату и время если в фунцию ничего не передается\n\n// console.log(now);\n\n// now = new Date('2020-08-29');// покажет конкретное число но не время\n\n// console.log(now);\n\n// now = new Date('2020, 8, 30, 20');// нихуя непонял как ре вводит все коряво\n// console.log(now);\n\n// now = new Date(0);// первое января 1970г 0 милисекунд с начала отсчета\n\n// console.log(now);\n\n// now = new Date(-9999999999999);//1653 год это вот столькомили секунд до 1970)\n\n// console.log(now);\n\n\n//методы гетеры\n\n// now = new Date('2020-08-29');\n// new Date.parse('2020-08-29');// еще один способ задания даты\n\n// console.log(now.getFullYear());// 2020в формате 4 цифр\n// console.log(now.getMonth());//месяц\n// console.log(now.getDate());// число месяца\n// console.log(now.getDay());// суббота\n// console.log(now.getUTCHours());// в часовом поясе +0\n\n// console.log(now.getTimezoneOffset());// разница с главным поясом в минутах выдаст -180\n// console.log(now.getTime());//1598709799376 количество милисекунд которые прошли  1970 года\n\n//методы сетеры то же самое но get меняем на set\n\n// console.log(now.setHours(18, 40));// часы. и минуты сюд тоже можно писать но не стоит\n// console.log(now);\n\n\n// let start = new Date();\n\n// for (let i = 0; i <10000000; i++) {  // загружаем систему циклом\n//     let some = i ** 3;// ** возвести в степень \n// }\n\n// let end = new Date();\n\n// alert(`Цикл отработал за ${end - start} миллисекунд`);\n// // короче можно вычитать дату из даты\n\n\n\n\n//Lesson 41 таймер обратного отсчета на сайте\n// window.addEventListener('DOMContentLoaded', function() {\n\n//     // Tabs\n\n// \tlet tabs = document.querySelectorAll('.tabheader__item'),\n// \t\ttabsContent = document.querySelectorAll('.tabcontent'),\n// \t\ttabsParent = document.querySelector('.tabheader__items');\n\n// \tfunction hideTabContent() {\n\n//         tabsContent.forEach(item => {// скрываем табы\n//             item.classList.add('hide');// выдаем нужные классы \n//             item.classList.remove('show', 'fade');// тоггл кстати тут нельзя использовать\n//         });\n\n//         tabs.forEach(item => {//убираеем класс active укаждого таба\n//             item.classList.remove('tabheader__item_active');\n//         });\n// \t}\n\n// \tfunction showTabContent(i=0) {// показать табы i=0 значитчто если функциявызываетсябезаргумента топо умолчанию выставится значение которое указано\n//         tabsContent[i].classList.add('show', 'fade');\n//         tabsContent[i].classList.remove('hide');\n//         tabs[i].classList.add('tabheader__item_active');\n//     }\n\n//     hideTabContent();\n//     showTabContent();\n\n// \ttabsParent.addEventListener('click', function(event) {// делегирование через родителя на все кнопки справа\n// \t\tconst target = event.target;// чтобы постоянноне писать евент.таргет\n// \t\tif(target && target.classList.contains('tabheader__item')) {// тут проверка содержание класса внутри родителя определяем что мы точно кликнулив таб\n//             tabs.forEach((item, i) => {// надо определить номер таба чтобы знать какой показывать\n//                 if (target == item) {// если кликнутый таб равен перебераемому то вызываем функции\n//                     hideTabContent();// прячем все табы\n//                     showTabContent(i);// показваем тот который совпал с кликаемым\n//                 }\n//             });\n// \t\t}\n//     });\n\n\n\n//     //Timer\n\n//     const deadline = '2020-10-1';\n\n//     function getTimeRemaining(endtime) {\n//         const t = Date.parse(endtime) - Date.parse(new Date()),\n//             days = Math.floor( (t/(1000*60*60*24)) ),// округление доближайшего целого\n//             seconds = Math.floor( (t/1000) % 60 ),// % возвращает остаток от деления\n//             minutes = Math.floor( (t/1000/60) % 60 ),// если не влезает в час то тоже возвращается остаток\n//             hours = Math.floor( (t/(1000*60*60) % 24) );// тут если что то не будет влезать в целый день то вернется остаток\n\n//         return {// функция возвращает объект \n//             'total': t,\n//             'days': days,\n//             'hours': hours,\n//             'minutes': minutes,\n//             'seconds': seconds\n//         };\n//     }\n\n//     function getZero(num){// подставляем 0 если значение меньше 10 чтобы не торчала цифра\n//         if (num >= 0 && num < 10) { \n//             return '0' + num;\n//         } else {\n//             return num;\n//         }\n//     }\n\n//     function setClock(selector, endtime) {// функция которая получает элементы и записвает в них рассчитанное время\n\n//         const timer = document.querySelector(selector),\n//             days = timer.querySelector(\"#days\"),\n//             hours = timer.querySelector('#hours'),\n//             minutes = timer.querySelector('#minutes'),\n//             seconds = timer.querySelector('#seconds'),\n//             timeInterval = setInterval(updateClock, 1000);// интервал обновления чтобы часы переписывались каждую секунду\n\n//         updateClock();// сразу вызываем функциючтобыневидеть верстку а сразу переписать таймер\n\n//         function updateClock() {// переписываем HTML\n//             const t = getTimeRemaining(endtime);// заряжаем сюда рассчитаный объект и переписываем HTML\n\n//             days.innerHTML = getZero(t.days);//передаем в подставлятель нулей значение из рассчетов\n//             hours.innerHTML = getZero(t.hours);\n//             minutes.innerHTML = getZero(t.minutes);\n//             seconds.innerHTML = getZero(t.seconds);\n\n//             if (t.total <= 0) {// если время уже вышло то таймер больше не переписывается\n//                 clearInterval(timeInterval);\n//             }\n//         }\n//     }\n\n//     setClock('.timer', deadline);// вызываем функцию\n\n// });\n\n\n\n\n\n\n//Урок 42 Параметры документа, окна и работа с ним\n\n// есть понятия document window screen\n\n// const box = document.querySelector('.box'),\n//       btn = document.querySelector('button');\n\n//есть картинка которая показывает как можно получать высотуи ширину\n// const width = box.clientWidth;// обращайвнимание какие свойства бордер бокс в цсс и величины\n// const height = box.clientHeight;\n\n// const width = box.offsetWidth;// с бордером марджином и полосой  прокрутки \n// const height = box.offsetHeight;// видимая часть\n\n// const width = box.scrollWidth;// в горизонтальние проскроленное значение не входит толщина вертикальной прокрутки\n// const height = box.scrollHeight;// полностью проскроленное значение\n\n\n// btn.addEventListener('click', () => {// после клика инлайн высота установится на полную высоту прокрутки\n//      box.style.height = box.scrollHeight + \"px\";\n//     console.log(box.scrollTop);// при клике покажет сколько пролистал типо сколькосверху торчит и не видно\n// });\n\n//есть еще скроллыпо по отношению к странице\n\n\n// console.log(box.getBoundingClientRect());// покажет координаты к примеру right это значение от левой границы окна браузера до правой границы элемента но он считает координаты не как в цсс а наоборот \n// console.log(box.getBoundingClientRect().top);// только значение топа\n\n\n// const style = window.getComputedStyle(box);// все цсс стили которые можно только посмотреть \n// console.log(style.display);// посмотреть конкретный стиль\n\n// const style = window.getComputedStyle(box, \"тутможно указать псевдоэлемент\");\n\n\n// console.log(document.scrollTop);// нихера не покажет у document нет свойства scrolltop\n// console.log(document.documentElement.scrollTop);// теперь покажет это значение можно устанавливать например \n// document.documentElement.scrollTop = 0;// отправить наверх\n\n// window.scrollBy(0, 400);// относительный скролл скроллить к аргументам x, y. Работает от текущей позиции\n// window.scrollTo(0, 400); // абсолютный скролл \n\n\n\n\n// Урок 43, 44 Создаем модальное окно\n// сначалаккаждой кнопке которая должна вызыывать модальное окно надо прилепить атрибут data-modal в Html\n\n// window.addEventListener('DOMContentLoaded', function () {\n\n//     // Tabs\n\n//     let tabs = document.querySelectorAll('.tabheader__item'),\n//         tabsContent = document.querySelectorAll('.tabcontent'),\n//         tabsParent = document.querySelector('.tabheader__items');\n\n//     function hideTabContent() {\n\n//         tabsContent.forEach(item => { // скрываем табы\n//             item.classList.add('hide'); // выдаем нужные классы \n//             item.classList.remove('show', 'fade'); // тоггл кстати тут нельзя использовать\n//         });\n\n//         tabs.forEach(item => { //убираеем класс active укаждого таба\n//             item.classList.remove('tabheader__item_active');\n//         });\n//     }\n\n//     function showTabContent(i = 0) { // показать табы i=0 значитчто если функциявызываетсябезаргумента топо умолчанию выставится значение которое указано\n//         tabsContent[i].classList.add('show', 'fade');\n//         tabsContent[i].classList.remove('hide');\n//         tabs[i].classList.add('tabheader__item_active');\n//     }\n\n//     hideTabContent();\n//     showTabContent();\n\n//     tabsParent.addEventListener('click', function (event) { // делегирование через родителя на все кнопки справа\n//         const target = event.target; // чтобы постоянноне писать евент.таргет\n//         if (target && target.classList.contains('tabheader__item')) { // тут проверка содержание класса внутри родителя определяем что мы точно кликнулив таб\n//             tabs.forEach((item, i) => { // надо определить номер таба чтобы знать какой показывать\n//                 if (target == item) { // если кликнутый таб равен перебераемому то вызываем функции\n//                     hideTabContent(); // прячем все табы\n//                     showTabContent(i); // показваем тот который совпал с кликаемым\n//                 }\n//             });\n//         }\n//     });\n\n\n\n//     //Timer\n\n//     const deadline = '2020-10-1';\n\n//     function getTimeRemaining(endtime) {\n//         const t = Date.parse(endtime) - Date.parse(new Date()),\n//             days = Math.floor((t / (1000 * 60 * 60 * 24))), // округление доближайшего целого\n//             seconds = Math.floor((t / 1000) % 60), // % возвращает остаток от деления\n//             minutes = Math.floor((t / 1000 / 60) % 60), // если не влезает в час то тоже возвращается остаток\n//             hours = Math.floor((t / (1000 * 60 * 60) % 24)); // тут если что то не будет влезать в целый день то вернется остаток\n\n//         return { // функция возвращает объект \n//             'total': t,\n//             'days': days,\n//             'hours': hours,\n//             'minutes': minutes,\n//             'seconds': seconds\n//         };\n//     }\n\n//     function getZero(num) { // подставляем 0 если значение меньше 10 чтобы не торчала цифра\n//         if (num >= 0 && num < 10) {\n//             return '0' + num;\n//         } else {\n//             return num;\n//         }\n//     }\n\n//     function setClock(selector, endtime) { // функция которая получает элементы и записвает в них рассчитанное время\n\n//         const timer = document.querySelector(selector),\n//             days = timer.querySelector(\"#days\"),\n//             hours = timer.querySelector('#hours'),\n//             minutes = timer.querySelector('#minutes'),\n//             seconds = timer.querySelector('#seconds'),\n//             timeInterval = setInterval(updateClock, 1000); // интервал обновления чтобы часы переписывались каждую секунду\n\n//         updateClock(); // сразу вызываем функциючтобыневидеть верстку а сразу переписать таймер\n\n//         function updateClock() { // переписываем HTML\n//             const t = getTimeRemaining(endtime); // заряжаем сюда рассчитаный объект и переписываем HTML\n\n//             days.innerHTML = getZero(t.days); //передаем в подставлятель нулей значение из рассчетов\n//             hours.innerHTML = getZero(t.hours);\n//             minutes.innerHTML = getZero(t.minutes);\n//             seconds.innerHTML = getZero(t.seconds);\n\n//             if (t.total <= 0) { // если время уже вышло то таймер больше не переписывается\n//                 clearInterval(timeInterval);\n//             }\n//         }\n//     }\n\n//     setClock('.timer', deadline); // вызываем функцию\n\n\n\n//Modals.Пробую сам. Получилось\n// const buttons = document.querySelectorAll('[data-modal]');// получили кнопки\n// const modal = document.querySelector('.modal');//получили модалку\n\n// function toggler () {// собака - открывака - закрывака\n//     modal.classList.toggle('show');// тогглер класса\n// }\n\n// buttons.forEach ((item,) => {//вешаем обработчк на каждую кнопку который вызывает тогглер по клику\n//     item.addEventListener('click', toggler);\n// });\n\n//Modals.Из урока\n// const modalTrigger = document.querySelectorAll('[data-modal]'),\n//     modal = document.querySelector('.modal'),\n//     modalCloseBtn = document.querySelector('[data-close]');\n\n// modalTrigger.forEach(btn => {\n//     btn.addEventListener('click', function () {\n//         modal.classList.add('show');\n//         modal.classList.remove('hide');\n//         document.body.style.overflow = 'hidden'; //отрубаем скролл\n//     });\n\n//     function closeModal() {//собака - закрывака\n//         modal.classList.add('hide');\n//         modal.classList.remove('show');\n//         document.body.style.overflow = ''; //врубаем скролл\n//     }\n\n//     modalCloseBtn.addEventListener('click', closeModal);\n\n//     modal.addEventListener('click', (e) => { // если клик попадает по подложке то окно закрывается\n//         if (e.target === modal) {\n//             closeModal();// собака закрывака\n//         }\n//     });\n\n//     document.addEventListener('keydown', (e) => {//при клавише escape нажатой окно тоже закрывается. Можно найти таблицу в интернете\n//         if (e.code === \"Escape\" && modal.classList.contains('show')) {// работет толькотогда когда модальное окно открыто \n//             closeModal();\n//         }\n//     });\n// });\n\n\n//Модалс скролл мой вариант \n\n// const checkScroll = function checkScroll () {// собака - скролопроверяка - модальное окно открывака\n//     console.log(document.documentElement.scrollTop);\n\n//     if(document.documentElement.scrollTop > 3000) {\n\n//         modal.classList.add('show');\n//         modal.classList.remove('hide');\n//         document.body.style.overflow = 'hidden';\n//         document.removeEventListener('scroll',checkScroll);//суициднуться\n//     }\n// };\n\n\n\n//  document.addEventListener('scroll', checkScroll);\n\n\n\n//Модалс скролл вариант из урока\n\n// Modal\n\n//     const modalTrigger = document.querySelectorAll('[data-modal]'),\n//         modal = document.querySelector('.modal'),\n//         modalCloseBtn = document.querySelector('[data-close]');\n\n//     modalTrigger.forEach(btn => {\n//         btn.addEventListener('click', openModal);\n\n\n//         function closeModal() {\n//             modal.classList.add('hide');\n//             modal.classList.remove('show');\n//             document.body.style.overflow = '';\n//         }\n\n//         function openModal() {\n//             modal.classList.add('show');\n//             modal.classList.remove('hide');\n//             document.body.style.overflow = 'hidden';\n//             clearInterval(modalTimerId); //если пользователь сам открыл модальное окно то таймер обнуляется\n//         }\n\n//         modalCloseBtn.addEventListener('click', closeModal);\n\n//         modal.addEventListener('click', (e) => {\n//             if (e.target === modal) {\n//                 closeModal();\n//             }\n//         });\n\n//         document.addEventListener('keydown', (e) => {\n//             if (e.code === \"Escape\" && modal.classList.contains('show')) {\n//                 closeModal();\n//             }\n//         });\n\n//         const modalTimerId = setTimeout(openModal, 3000); // тут он вынес опен модал в отдельную функцию и задал таймаут \n\n//         function showModalByScroll() {\n//             if (window.pageYOffset + document.documentElement.clientHeight >= document.documentElement.scrollHeight) { // определяем чтопользователь долисталдо конца\n//                 //первое это то что прокручено выше  второе этовысота того что видно сейчас третье - вся высота сайта\n//                 openModal();\n//                 window.removeEventListener('scroll', showModalByScroll); // убираем обработчик\n//             }\n//         }\n//         window.addEventListener('scroll', showModalByScroll);\n//     }); // кстати {once:true} тутнеподходит\n\n// });\n\n\n\n\n\n\n\n//45 Урок Функции-конструкторы\n\n//Функция -объект по своей сути\n\n// const num = new Number(3);// это будетобъект намбер укоторого value 3\n\n// const num = new Function(3);// это тожебудет объект очень старый синтаксис\n\n// function User(name, id){// функция-конструктор\n//     this.name = name;\n//     this.id = id;\n//     this.human = true;\n//     this.hello = () =>{\n//         console.log(`Hello ${this.name}`);\n//     };\n// }\n\n// User.prototype.exit = function(name) {// прототип. все потомки будут иметь эту функцию это не setPrototype тут мы добавляем методы в уже существующий объект\n//     // Вместо этого можно записать как ключ и свойство объекта кстати \n//     console.log(`Пользователь ${this.name} ушел`);\n// };\n\n// const Ivan = new User('ivan', 28);//создание новых объектов через конструктор\n// const Alex = new User('Alex', 20);// просто вводимаргументы и получаем шаблонный объект\n\n\n// Ivan.exit();\n\n// Ivan.hello();\n\n// есть классы в новыхверсиях языка выше написана версия как это работает \"под капотом\" \n// можно записывать это проще \n\n\n\n//46 Урок Контекст вызова this\n\n//this- место для функционирования. Контекст вызова\n\n// function showThis (a, b) {\n//     console.log(this);\n//     function sum() {\n//         console.log(this);\n//         // return this.a + this.b;// если так то получим в консоль undefined\n//         return a + b;//замыкание - когда функция ищетаргументы внутри себя потом снаружи\n//     }\n//     console.log(sum());\n// }\n\n// showThis(4, 5);\n\n\n// const obj = {\n//     a:20,\n//     b:15,\n//     sum:function(){\n//         console.log(this);// если мы используем метод внутри объекта то this будеет ссылаться на объект в котором он вызван\n//     }\n// };\n// obj.sum();\n\n// const obj = {\n//     a:20,\n//     b:15,\n//     sum:function(){\n//         function shout(){\n//             console.log(this);// а тут уже контекст вызова будет undefined \n//         }\n//         shout();\n//     }\n// };\n\n\n// function User(name, id){// функция-конструктор из прошлого урока\n//     this.name = name;// внутри такой функции this это только что созданый новый объект \n//     this.id = id;\n//     this.human = true;\n//     this.hello = function (){\n//         console,log('Hello!'+ this.name);// тут тоже this- это создаваемый объект\n//     }\n\n// }\n// let ivan = new User('Ivan', 23);// в THIS тут подставляется  этот создаваемый объект\n\n\n// console.log(this);\n// без \"use strict\" получим this = window вконсоль как глобальный объет\n//если стрикт включен то получим this = undefined\n// контекст у методов объекта - сам объект\n// this в конструкторах и классах это новый экземпляр объекта\n// Ручная привязка this: call, apply, bind\n\n// function sayName(surname) {\n//     console.log(this);//// \n//     console.log(this.name + surname);\n// }\n\n// const user = {\n//     name:'John'\n// };\n// // контролирем контекст вызова\n// sayName.call(user,'Smith');// передаем контекст вызова который мы хотим передать в эту функцию\n// sayName.apply(user, ['Smith']);// тут аргументы передаются в массиве\n// //разница только в синтаксисе\n\n\n\n// function count(num) {\n//     return this*num;\n// }\n\n// const double = count.bind(2);// создаем новую функцию double на основе заданной с жестко заданным значением this\n// console.log(double(13));// передаем в double число которое нужно удвоить\n\n\n\n\n\n\n\n\n\n// const btn = document.querySelector('button');\n\n// btn.addEventListener('click', function () {\n//     console.log(this);//функция записана вклассическом варианте. тут контекст вызова - сам элемент на котором произошло событие. Тоже самое что e.target\n\n// });\n// // меняем на стрелочную функцию \n// btn.addEventListener('click',  (e) => {\n//     console.log(e.target);// контекст вызова потеряется и станет undefined если используетсястрелочная функция\n//     //тут подходит только e.target и this не проканает\n\n// });\n\n// Это вырезка из кода выше\n// const obj = {\n//     a:20,\n//     b:15,\n//     sum:function(){\n//         console.log(this);// если мы используем метод внутри объекта то this будеет ссылаться наобъект в котором он вызван\n//     }\n// };\n// obj.sum();\n\n// const obj = {\n//     a:20,\n//     b:15,\n//     sum:function(){\n//         function shout(){\n//             console.log(this);// а тут уже контекст вызова будет undefined \n//         }\n//         shout();\n//     }\n// };\n\n\n// у стрелочной функции нет своего контекста вызова она берет его у своего родителя\n\n\n// const obj = {\n//     num: 5,\n//     sayNumber: function() {\n//         const say = () => {\n//             console.log(this.num);// контекст вызова будет не undefined. Тут this - родительский объект  потому что функция стрелочная\n//         };\n\n//         say();\n//     }\n// };\n\n// obj.sayNumber();\n\n\n\n\n\n\n\n// const double = (a) => {\n//     return a * 2;\n// };\n\n// // этот кодможно записать так:\n// const double = (a) => a * 2// return подставится автоматически\n\n// const double = a => a * 2// если 1 аргумент то можно писать даже без скобок\n\n\n\n\n\n//Классы ES 6\n\n//Классы - синтаксическая обертка конструктора\n\n// class Rectagle {\n//     constructor(height, width) {// тут задаем аргументы которые будут приходить извне при создании экземпляра класса\n//         this.height = height;\n// //         this.width = width;\n\n//     }\n//     calcArea(){// в классе методы задаются без двоеточий или ключевого слова function\n//         return this.height * this.width;// this здесь новый создаваемый объект\n//     }\n// }\n\n\n// class ColoredRectngleWithText extends Rectagle{ //наследование/ расширение\n//     //тут надо переписать аргументы но методы занаследуются сами\n//     constructor(height, width, text, bgColor) {\n//         super(height, width);//идет первой строчкой в конструкторе переносит код из материнского класса чтобы его не копировать\n//         this.text = text;\n//         this.bgColor = bgColor\n//     }\n//     showMyPros(){\n//         console.log(`Текст: ${this.text}, цвет ${this.bgColor}`);\n//     }\n// }\n\n// const div = new ColoredRectngleWithText(25,10, 'Hello World', 'red');\n\n// div.showMyPros();\n// console.log(div.calcArea());\n\n// const square = new Rectagle(10, 10);// используем класс - конструктор\n// const long  = new Rectagle(20, 100);\n// console.log(long.calcArea());//метод будет работать на любой объект созданный через этот класс\n// console.log(square.calcArea());// вызываем метод нашего класса\n\n\n\n\n\n\n// Урок 48 Используем классы в реальной работе\n\n\n//Короче надо шаблонизировать карточки на сайте и создавать их только передавая аргументы\n\n\n//Ну походусначала надо сделать класс и на основе объекта из этого класса написать код \n// const menuItems = document.querySelector(\".menu__field .container\");\n\n// menuItems.innerHTML = '';\n\n// class MenuItem {\n//     constructor(img, subtitle, description, price) {\n//         this.img = img;\n//         this.subtitle = subtitle;\n//         this.description = description;\n//         this.price = price;\n//     }\n\n//     addMyItem() {\n//         menuItems.innerHTML += `\n//         <div class=\"menu__item\">\n//             <img src=\"img/tabs/${this.img}.jpg\" alt=\"${this.img}\">\n//             <h3 class=\"menu__item-subtitle\">Меню \"${this.subtitle}\"</h3>\n//             <div class=\"menu__item-descr\">${this.description}</div>\n//             <div class=\"menu__item-divider\"></div>\n//             <div class=\"menu__item-price\">\n//                 <div class=\"menu__item-cost\">Цена:</div>\n//                 <div class=\"menu__item-total\"><span>${this.price}</span> грн/день</div>\n//             </div>\n//         </div>`\n//     }\n\n// }\n\n// const fitnessMenu = new MenuItem('vegy', 'Фитнес', 'Меню \"Фитнес\" - это новый подход к приготовлению блюд: больше свежих овощей и фруктов. Продукт активных и здоровых людей. Это абсолютно новый продукт с оптимальной ценой и высоким качеством!', '1000');\n\n// fitnessMenu.addMyItem();\n\n// const burgerMenu = new MenuItem('burger','ЖирМакс','Ни в чем себе не отказывайте.Чем больше живот, тем больше в вас счастья!Ни в чем себе не отказывайте.Чем больше живот, тем больше в вас счастья!Ни в чем себе не отказывайте.Чем больше живот, тем больше в вас счастья!Ни в чем себе не отказывайте.Чем больше живот, тем больше в вас счастья!','1500');\n\n// burgerMenu.addMyItem();\n// const burgerMenu2 = new MenuItem('elite','ЭлитБуржуй','Ни в чем себе не отказывайте.Чем больше живот, тем больше в вас счастья!Ни в чем себе не отказывайте.Чем больше живот, тем больше в вас счастья!Ни в чем себе не отказывайте.Чем больше живот, тем больше в вас счастья!Ни в чем себе не отказывайте.Чем больше живот, тем больше в вас счастья!','3000');\n// burgerMenu2.addMyItem();\n\n\n\n// Так атеперь из курса\n// Используем классы для создание карточек меню\n\n//  class MenuCard {//создали класс\n//     constructor(src, alt, title, descr, price, parentSelector) {\n//         this.src = src;\n//         this.alt = alt;\n//         this.title = title;\n//         this.descr = descr;\n//         this.price = price;\n//         this.parent = document.querySelector(parentSelector);//тут добавили выбор куда записывать Html\n//         this.transfer = 27;//курс гривны\n//         this.changeToUAH(); // вызов функции прям в классе\n//     }\n\n//     changeToUAH() {//функция первода  валют\n//         this.price = this.price * this.transfer; \n//     }\n\n//     render() {// функция которая заливает в HtML\n//         const element = document.createElement('div');//див - обертка\n//         element.innerHTML = `\n//             <div class=\"menu__item\">\n//                 <img src=${this.src} alt=${this.alt}>\n//                 <h3 class=\"menu__item-subtitle\">${this.title}</h3>\n//                 <div class=\"menu__item-descr\">${this.descr}</div>\n//                 <div class=\"menu__item-divider\"></div>\n//                 <div class=\"menu__item-price\">\n//                     <div class=\"menu__item-cost\">Цена:</div>\n//                     <div class=\"menu__item-total\"><span>${this.price}</span> грн/день</div>\n//                 </div>\n//             </div>\n//         `;// ну тут я также сделал только через +=\n//         this.parent.append(element);// запихнуть этот див в парент который будет передаваться аргументом\n//     }\n// }\n\n\n// //ну адальше создаем объекты и вызываем рендер\n// new MenuCard(\n//     \"img/tabs/vegy.jpg\",\n//     \"vegy\",\n//     'Меню \"Фитнес\"',\n//     'Меню \"Фитнес\" - это новый подход к приготовлению блюд: больше свежих овощей и фруктов. Продукт активных и здоровых людей. Это абсолютно новый продукт с оптимальной ценой и высоким качеством!',\n//     9,\n//     \".menu .container\"\n// ).render();\n\n// new MenuCard(\n//     \"img/tabs/post.jpg\",\n//     \"post\",\n//     'Меню \"Постное\"',\n//     'Меню “Постное” - это тщательный подбор ингредиентов: полное отсутствие продуктов животного происхождения, молоко из миндаля, овса, кокоса или гречки, правильное количество белков за счет тофу и импортных вегетарианских стейков.',\n//     14,\n//     \".menu .container\"\n// ).render();\n\n// new MenuCard(\n//     \"img/tabs/elite.jpg\",\n//     \"elite\",\n//     'Меню “Премиум”',\n//     'В меню “Премиум” мы используем не только красивый дизайн упаковки, но и качественное исполнение блюд. Красная рыба, морепродукты, фрукты - ресторанное меню без похода в ресторан!',\n//     21,\n//     \".menu .container\"\n// ).render();\n\n\n\n\n\n\n\n\n\n\n//Лессон 49 Rest оператор и параметры по умолчанию\n\n\n\n\n//spread оператор ... раскладывает массив\n//rest отдельные элменты собирает в массив\n\n// const log = function(a, b, ...rest) {//допустим мы не знаем какие аргументы будут в этой функции точно\n//     console.log(a, b, rest);\n// }\n// log('basic', 'второй бейзик', 'третий', \"четвертый\");// >>> basic второй бейзик [ 'третий', 'четвертый' ]\n\n\n// function calcOrDouble(number, basis){\n//     basis = basis || 2;//если базисне задан то оператор || вернет 2 потому что 2 - правда \n//     console.log(number*basis);\n// }\n\n// calcOrDouble(3, 5);// >>>> 15\n// calcOrDouble(3);// >>> 6\n\n// function calcOrDouble(number, basis=2){// в ЕС6 можно задавать аргумент по умолчанию так\n//     console.log(number*basis);\n// }\n\n// calcOrDouble(3);// >>>> 6\n\n//Теперь на практике по коду из предыдущего урока\n\n// class MenuCard {\n//     constructor(src, alt, title, descr, price, parentSelector, ... classes) {// добавляем rest оператор. Он ксатати неподдерживает дефолтные значения\n//         this.src = src;\n//         this.alt = alt;\n//         this.title = title;\n//         this.descr = descr;\n//         this.price = price;\n//         this.classes = classes;\n//         this.parent = document.querySelector(parentSelector);\n//         this.transfer = 27;\n//         this.changeToUAH(); \n//     }\n\n//     changeToUAH() {\n//         this.price = this.price * this.transfer; \n//     }\n\n//     render() {\n//         const element = document.createElement('div');//див - обертка\n//         if(this.classes.length === 0){// если в классы ничего не было передано - пустой массив\n//             this.element = \"menu__item\";// дефолтный класс записываем в объект \n//             element.classList.add(this.element);//этот класс пришиваем к обертке\n//         }else {// если передали хоть один класс то запускаем перебор \n//             this.classes.forEach(className => element.classList.add(className));\n//             //this.classes - это массив из rest оператора. Мы его перебираем через forEach className - перебираемый элемент массивав данный момент и через стрелочную функцию добавляем каждый класс\n//             //в Html убираем внешнююобертку с классом menu__item\n\n//         }\n//         element.innerHTML = `\n//             <img src=${this.src} alt=${this.alt}>\n//             <h3 class=\"menu__item-subtitle\">${this.title}</h3>\n//             <div class=\"menu__item-descr\">${this.descr}</div>\n//             <div class=\"menu__item-divider\"></div>\n//             <div class=\"menu__item-price\">\n//                 <div class=\"menu__item-cost\">Цена:</div>\n//                 <div class=\"menu__item-total\"><span>${this.price}</span> грн/день</div>\n//             </div>\n//         `;\n//         this.parent.append(element);\n//     }\n// }\n\n\n\n// new MenuCard(\n//     \"img/tabs/vegy.jpg\",\n//     \"vegy\",\n//     'Меню \"Фитнес\"',\n//     'Меню \"Фитнес\" - это новый подход к приготовлению блюд: больше свежих овощей и фруктов. Продукт активных и здоровых людей. Это абсолютно новый продукт с оптимальной ценой и высоким качеством!',\n//     9,\n//     \".menu .container\",\n//     'menu__item'//в каждое создание новой карточки добавляем класс menu__item\n// ).render();\n\n// new MenuCard(\n//     \"img/tabs/post.jpg\",\n//     \"post\",\n//     'Меню \"Постное\"',\n//     'Меню “Постное” - это тщательный подбор ингредиентов: полное отсутствие продуктов животного происхождения, молоко из миндаля, овса, кокоса или гречки, правильное количество белков за счет тофу и импортных вегетарианских стейков.',\n//     14,\n//     \".menu .container\",\n//     'menu__item',//в каждое создание новой карточки добавляем класс menu__item\n//     'big'//можно добавлять сколько угодно классов\n// ).render();\n\n// new MenuCard(\n//     \"img/tabs/elite.jpg\",\n//     \"elite\",\n//     'Меню “Премиум”',\n//     'В меню “Премиум” мы используем не только красивый дизайн упаковки, но и качественное исполнение блюд. Красная рыба, морепродукты, фрукты - ресторанное меню без похода в ресторан!',\n//     21,\n//     \".menu .container\",\n//     'menu__item'//в каждое создание новой карточки добавляем класс menu__item\n// ).render();\n\n//еще надо сделать так чтобы по дефолту добавлялся класс menu__item чтобы верстка не сломалась если его не укажут\n\n\n\n\n//Урок 50 Локальные сервера\n\n//Сервер - бек энд часть\n// Хостинг - арендованное место на сервере\n//локальные сервера дают такой же функционал как на хостинге для тестирования\n// post запросы без сервера не оБрабатываются\n\n\n\n//Урок 51 JSON \n//JSON- javascript object notation\n//это набор пар ключ - значение\n\n\n// const persone = {\n//     name: 'Alex',\n//     tel: '+74658884658'\n// };\n\n\n//Допустим вот этот объект надо передать на сервер\n\n// надо конвертировать объект в нужный формат\n\n// console.log(JSON.stringify(persone));// >>> {\"name\":\"Alex\",\"tel\":\"+74658884658\"} это тот же самый объект но в двойных кавычках\n\n\n// //теперь допустим нам с сервераприходит JSON\n// console.log(JSON.parse(JSON.stringify(persone)));// >>> { name: 'Alex', tel: '+74658884658' } нормальный объект\n\n// глубокие копии подъезжают\n\n// const persone = {// делаем вложенный объект который будем копировать\n//     name: 'Alex',\n//     tel: '+74658884658',\n//     parents: {\n//         mom:'Olga',\n//         dad:'Mike'\n//     }\n\n// };\n\n// const clone = JSON.parse(JSON.stringify(persone));// стрингифаем и парсим первоначальный объект и будет глубокий клон \n// clone.parents.mom = 'Ann';\n// console.log(persone);\n// console.log(clone);\n\n\n\n//Урок 52 Пощадите AJAX и общение с сервером\n// короче нам что то надо делать без перезагрузки страницы.Например подгружать товары из интернет магазина при фильтрации\n//AJAX (аббревиатура от «Asynchronous Javascript And Xml»\n//HTTP запросы\n\n// const inputRub = document.querySelector('#rub'),\n//     inputUsd = document.querySelector('#usd');\n\n\n// inputRub.addEventListener('input', () => {\n//     const request = new XMLHttpRequest(); // создание запроса через конструктор\n//     // настройки запроса на сервер\n//     request.open('GET', 'js/current.json'); // 1- method(GET и POST) 2 - url(относительно HTML) 3 - async 4 - login 5 - password\n//     // теперь что именно мы отправляем \n//     request.setRequestHeader('Content-type', 'application/json; charset=utf-8'); // это HTTP заголовок. Не ебу что это такое\n//     request.send(); // тут в аргументе передается что то если используется POST\n\n\n// теперь надо разобрать полученные от сервера данные\n// request.addEventListener('readystatechange', () =>{//отслеживает статус готовности обработки запроса событие срабатывает когда readyState меняет значение\n//     if(request.readyState === 4 && request.status === 200){// проверяем готовность и успешность обработки запроса. Если все готово и без ошибок\n//         console.log(request.response);// показать ответ сервера\n//         const data = JSON.parse(request.response);// конвертировать в нормальный объект\n//         inputUsd.value = (+inputRub.value / data.current.usd).toFixed(2);// записать ответ в value инпута с usd c округлением до 2 знаков\n//     } else {\n//         inputUsd.value = \"Что - то наебнулось\";// Всегда оповещайпользователя\n//     }\n// });\n\n// status - 404 например. это ответы от сервера по коду\n// statusText - текстровое описание ответа от сервера \"not found\"\n// response - ответ от сервера \n// readyState - состояния запроса от 0 до 4 4 - done\n\n\n// альтернативный вар используется чаще\n//     request.addEventListener('load', () => { //это событие простосрабатывает когда запрос завершен а нена каких то  этапах\n//         if (request.status === 200) { // тут только статус проверяем а не этапы если все заебись то:\n//             console.log(request.response); // показать ответ сервера\n//             const data = JSON.parse(request.response); // конвертировать в нормальный объект\n//             inputUsd.value = (+inputRub.value / data.current.usd).toFixed(2); // записать ответ в value инпута с usd c округлением до 2 знаков\n//         } else {\n//             inputUsd.value = \"Что - то наебнулось\";\n//         }\n//     });\n\n// });\n\n\n\n\n\n//Урок 53 реализация скрипта отправки данных на сервер\n\n\n// короче делаем чтоб формы отправлялись без перезагрузки\n\n\n// Forms\n// const forms = document.querySelectorAll('form');// получаем формы\n// const message = {// объект в котором будет список фразв различных ситуациях \n//     loading: 'Загрузка...',\n//     success: 'Спасибо! Скоро мы с вами свяжемся',\n//     failure: 'Что-то пошло не так...'\n// };\n\n// forms.forEach(item => {// под каждую форму из массива подвязываем нашу функцию по отправке данных \n//     postData(item);// передаем каждую форму\n// });\n\n// function postData(form) {//функция по отправке данных на сервер\n//     form.addEventListener('submit', (e) => {// обработчик события отправки формы\n//         e.preventDefault();// отмена стандартного поведения \n\n//         let statusMessage = document.createElement('div');// в этот элемент будет записываться статус из объекта\n//         statusMessage.classList.add('status');//Дальше походу это будет стилизоваться\n//         statusMessage.textContent = message.loading;\n//         form.appendChild(statusMessage);// закидываем этот див в форму\n\n//         const request = new XMLHttpRequest();// создаем объект запроса  данных насервер\n//         request.open('POST', 'server.php');// настраиваем запрос\n//         request.setRequestHeader('Content-type', 'application/json; charset=utf-8');// когда используется связка xmlhttp реквест и form-data не нужноустанавливать заголовок \n//         //вот про вот эту шапку надо расшарить.Нихуя не понятно даже в гугле.Это видимо старая тема\n//         //ААААААААААААААААААААААаа боже блять чтопроисходит?????????7спасите\n//         const formData = new FormData(form);//собираем данные с формы через специальный конструктор. Но в атрибутах инпута всегда должен быть name иначе конструктор не сработает\n//         // можно отправлять данные просто в таком формате а можно в джейсоне\n\n\n\n//         const object = {};// переделваем FormData в JSON потому что почеловечески это сделать нельзя\n//         formData.forEach(function(value, key){\n//             object[key] = value;\n//         });\n//         const json = JSON.stringify(object);// а вот теперь можно конвертировать\n\n//         request.send(json);// отправвляем JSON\n//         //там еще сервер PHP надобыло переделывать\n\n\n\n//         request.addEventListener('load', () => {// по окончании обработки запроса\n//             if (request.status === 200) {//если статус 200\n//                 console.log(request.response);//показываем в консоль ответ с сервера\n//                 statusMessage.textContent = message.success;// переписываем месседж\n//                 form.reset();// обнуляем форму\n//                 setTimeout(() => {// удаляем сообщение о статусе через 2 секунды\n//                     statusMessage.remove();\n//                 }, 2000);\n//             } else {\n//                 statusMessage.textContent = message.failure;// переписываем месседж если все наебнулось\n//             }\n//         });\n//     });\n// }\n\n\n\n\n\n// Урок 54 красивое оповещение пользователя\n// window.addEventListener('DOMContentLoaded', function() {\n\n//     // Tabs\n\n//     let tabs = document.querySelectorAll('.tabheader__item'),\n//         tabsContent = document.querySelectorAll('.tabcontent'),\n//         tabsParent = document.querySelector('.tabheader__items');\n\n//     function hideTabContent() {\n\n//         tabsContent.forEach(item => {\n//             item.classList.add('hide');\n//             item.classList.remove('show', 'fade');\n//         });\n\n//         tabs.forEach(item => {\n//             item.classList.remove('tabheader__item_active');\n//         });\n//     }\n\n//     function showTabContent(i = 0) {\n//         tabsContent[i].classList.add('show', 'fade');\n//         tabsContent[i].classList.remove('hide');\n//         tabs[i].classList.add('tabheader__item_active');\n//     }\n\n//     hideTabContent();\n//     showTabContent();\n\n//     tabsParent.addEventListener('click', function(event) {\n//         const target = event.target;\n//         if(target && target.classList.contains('tabheader__item')) {\n//             tabs.forEach((item, i) => {\n//                 if (target == item) {\n//                     hideTabContent();\n//                     showTabContent(i);\n//                 }\n//             });\n//         }\n//     });\n\n//     // Timer\n\n//     const deadline = '2020-05-11';\n\n//     function getTimeRemaining(endtime) {\n//         const t = Date.parse(endtime) - Date.parse(new Date()),\n//             days = Math.floor( (t/(1000*60*60*24)) ),\n//             seconds = Math.floor( (t/1000) % 60 ),\n//             minutes = Math.floor( (t/1000/60) % 60 ),\n//             hours = Math.floor( (t/(1000*60*60) % 24) );\n\n//         return {\n//             'total': t,\n//             'days': days,\n//             'hours': hours,\n//             'minutes': minutes,\n//             'seconds': seconds\n//         };\n//     }\n\n//     function getZero(num){\n//         if (num >= 0 && num < 10) { \n//             return '0' + num;\n//         } else {\n//             return num;\n//         }\n//     }\n\n//     function setClock(selector, endtime) {\n\n//         const timer = document.querySelector(selector),\n//             days = timer.querySelector(\"#days\"),\n//             hours = timer.querySelector('#hours'),\n//             minutes = timer.querySelector('#minutes'),\n//             seconds = timer.querySelector('#seconds'),\n//             timeInterval = setInterval(updateClock, 1000);\n\n//         updateClock();\n\n//         function updateClock() {\n//             const t = getTimeRemaining(endtime);\n\n//             days.innerHTML = getZero(t.days);\n//             hours.innerHTML = getZero(t.hours);\n//             minutes.innerHTML = getZero(t.minutes);\n//             seconds.innerHTML = getZero(t.seconds);\n\n//             if (t.total <= 0) {\n//                 clearInterval(timeInterval);\n//             }\n//         }\n//     }\n\n//     setClock('.timer', deadline);\n\n//     // Modal\n\n//     const modalTrigger = document.querySelectorAll('[data-modal]'),\n//         modal = document.querySelector('.modal');\n\n//     modalTrigger.forEach(btn => {\n//         btn.addEventListener('click', openModal);\n//     });\n\n//     function closeModal() {\n//         modal.classList.add('hide');\n//         modal.classList.remove('show');\n//         document.body.style.overflow = '';\n//     }\n\n//     function openModal() {\n//         modal.classList.add('show');\n//         modal.classList.remove('hide');\n//         document.body.style.overflow = 'hidden';\n//         clearInterval(modalTimerId);\n//     }\n\n//     modal.addEventListener('click', (e) => {\n//         if (e.target === modal || e.target.getAttribute('data-close') == \"\") {//там где добавляли закрывание поподложке добавляем закрывание по крестику\n//             // типо цель клика должна быть с атрибутом дата клоз и быть пустой строокой\n//             //теперь дае в новосозданном модальном окне обработчик будет работать\n//             closeModal();\n//         }\n//     });\n\n//     document.addEventListener('keydown', (e) => {\n//         if (e.code === \"Escape\" && modal.classList.contains('show')) { \n//             closeModal();\n//         }\n//     });\n\n//     const modalTimerId = setTimeout(openModal, 300000);\n//     // Изменил значение, чтобы не отвлекало\n\n//     function showModalByScroll() {\n//         if (window.pageYOffset + document.documentElement.clientHeight >= document.documentElement.scrollHeight) {\n//             openModal();\n//             window.removeEventListener('scroll', showModalByScroll);\n//         }\n//     }\n//     window.addEventListener('scroll', showModalByScroll);\n\n//     // Используем классы для создание карточек меню\n\n//     class MenuCard {\n//         constructor(src, alt, title, descr, price, parentSelector, ...classes) {\n//             this.src = src;\n//             this.alt = alt;\n//             this.title = title;\n//             this.descr = descr;\n//             this.price = price;\n//             this.classes = classes;\n//             this.parent = document.querySelector(parentSelector);\n//             this.transfer = 27;\n//             this.changeToUAH(); \n//         }\n\n//         changeToUAH() {\n//             this.price = this.price * this.transfer; \n//         }\n\n//         render() {\n//             const element = document.createElement('div');\n\n//             if (this.classes.length === 0) {\n//                 this.classes = \"menu__item\";\n//                 element.classList.add(this.classes);\n//             } else {\n//                 this.classes.forEach(className => element.classList.add(className));\n//             }\n\n//             element.innerHTML = `\n//                 <img src=${this.src} alt=${this.alt}>\n//                 <h3 class=\"menu__item-subtitle\">${this.title}</h3>\n//                 <div class=\"menu__item-descr\">${this.descr}</div>\n//                 <div class=\"menu__item-divider\"></div>\n//                 <div class=\"menu__item-price\">\n//                     <div class=\"menu__item-cost\">Цена:</div>\n//                     <div class=\"menu__item-total\"><span>${this.price}</span> грн/день</div>\n//                 </div>\n//             `;\n//             this.parent.append(element);\n//         }\n//     }\n\n//     new MenuCard(\n//         \"img/tabs/vegy.jpg\",\n//         \"vegy\",\n//         'Меню \"Фитнес\"',\n//         'Меню \"Фитнес\" - это новый подход к приготовлению блюд: больше свежих овощей и фруктов. Продукт активных и здоровых людей. Это абсолютно новый продукт с оптимальной ценой и высоким качеством!',\n//         9,\n//         \".menu .container\"\n//     ).render();\n\n//     new MenuCard(\n//         \"img/tabs/post.jpg\",\n//         \"post\",\n//         'Меню \"Постное\"',\n//         'Меню “Постное” - это тщательный подбор ингредиентов: полное отсутствие продуктов животного происхождения, молоко из миндаля, овса, кокоса или гречки, правильное количество белков за счет тофу и импортных вегетарианских стейков.',\n//         14,\n//         \".menu .container\"\n//     ).render();\n\n//     new MenuCard(\n//         \"img/tabs/elite.jpg\",\n//         \"elite\",\n//         'Меню “Премиум”',\n//         'В меню “Премиум” мы используем не только красивый дизайн упаковки, но и качественное исполнение блюд. Красная рыба, морепродукты, фрукты - ресторанное меню без похода в ресторан!',\n//         21,\n//         \".menu .container\"\n//     ).render();\n\n//     // Forms\n\n//     const forms = document.querySelectorAll('form');\n//     const message = {\n//         loading: 'icons/spinner.svg',// адрес к картинке\n//         success: 'Спасибо! Скоро мы с вами свяжемся',\n//         failure: 'Что-то пошло не так...'\n//     };\n\n//     forms.forEach(item => {\n//         postData(item);\n//     });\n\n//     function postData(form) {\n//         form.addEventListener('submit', (e) => {\n//             e.preventDefault();\n\n//             let statusMessage = document.createElement('img');// вместо дива img тег\n//             statusMessage.src = message.loading;\n//             statusMessage.style.cssText = `\n//                 display: block;\n//                 margin: 0 auto;\n//             `;\n//             form.insertAdjacentElement('afterend', statusMessage);// append неиспользуем чтобы верстка не плющилась \n\n//             const request = new XMLHttpRequest();\n//             request.open('POST', 'server.php');\n//             request.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n//             const formData = new FormData(form);\n\n//             const object = {};\n//             formData.forEach(function(value, key){\n//                 object[key] = value;\n//             });\n//             const json = JSON.stringify(object);\n\n//             request.send(json);\n\n//             request.addEventListener('load', () => {\n//                 if (request.status === 200) {\n//                     console.log(request.response);\n//                     showThanksModal(message.success);//вставляем нашу функцию\n//                     statusMessage.remove();\n//                     form.reset();\n//                 } else {\n//                     showThanksModal(message.failure);// и сюда\n//                 }\n//             });\n//         });\n//     }\n// // вот отсюданачинается\n//     function showThanksModal(message) {\n//         const prevModalDialog = document.querySelector('.modal__dialog'); // получаем блок в модальном окне\n\n//         prevModalDialog.classList.add('hide');// скрываем структуру обычного модального окна\n//         openModal();// открываем модальное окно но уже без контента\n\n//         const thanksModal = document.createElement('div');// создаем блок - обертку\n//         thanksModal.classList.add('modal__dialog');// класс который применен к модалке в верстке применяется к новому модальному окну\n//         thanksModal.innerHTML = `\n//             <div class=\"modal__content\">\n//                 <div class=\"modal__close\" data-close>×</div>\n//                 <div class=\"modal__title\">${message}</div>\n//             </div>\n//         `;// чтобы крестик в верстке работал при динамической подстановке надо сделать делегирование событий выше где прописывался код для модальных окон \n//         document.querySelector('.modal').append(thanksModal);// вставляем модальное окно которое сверстали\n//         setTimeout(() => {//через 4 секнды убираем элемент \n//             thanksModal.remove();\n//             prevModalDialog.classList.add('show');// старое модальное показываем\n//             prevModalDialog.classList.remove('hide');\n//             closeModal();\n//         }, 4000);\n//     }\n// });\n\n\n\n\n\n// Урок 55 Promise ES6\n\n// Callback hell- когда очень много асинхронного кода\n\n// console.log('Запрос данных...');\n\n// const req = new Promise(function (resolve, reject) {/// создаем обещание и помещаем 2 таких аргумента вместо которых будет подставляться функция\n//     //resolve если все збс reject если все хуево\n\n//     setTimeout(() => {// это имитация запроса на сервер\n//         console.log('Подготовка данных...');\n\n//         const product = {\n//             name: 'TV',\n//             price: 2000\n//         };\n\n//         resolve(product);// ато аргумент - функция которая будет передаваться\n//         //тут в функцию передаются какието данные которые заретёрнятся\n        \n//     }, 2000);\n\n// });\n// //сюда приходит product из resolve затем он модифицируется опять через промис req2 и возвращается в req2.then\n// req.then((product)=> {// метод then принимает внутрь себя такой аргумент с функцией который называется resolve\n//    const req2 = new Promise((resolve,reject)=> {\n//     setTimeout(() => {\n//         product.status = 'order';\n//         resolve(product);\n//     }, 2000);\n//    })\n// })//метод который выполняется на промисе в случае положительного исхода. внутрь помещается функция которая будет передаваться в resolve\n\n// req2.then(data => {//принимаем модифицированный продукт и выводим его в консоль\n//    console.log(data); \n// });\n\n\n\n// //вроде этот код ничем не отличается от колбек хелла\n// // преимущество промисов в том что их можно возвращать по цепочке\n\n\n// req.then((product) => { \n//     return new Promise((resolve, reject) => {//тут мы не стали создавать переменную req2 а написали return\n//         setTimeout(() => {\n//             product.status = 'order';\n//             resolve(product);\n//         }, 2000);\n//     });\n// }).then(data => { // вставляем бывший req2 сюда\n//     data.modyfy = true;// можно добавлять не только асинхронный код с таймаутами или временем выполнения как запрос на сервер  \n//     return data;//возвращаем\n// }).then(data => {// опять принимаем и выводим\n//     console.log(data);\n// });\n\n\n// // он говорит что такой код удобнее\n// //все четко следует друг за другом\n\n// //теперь про reject\n\n\n// req.then((product) => { \n//     return new Promise((resolve, reject) => {//тут мы не стали создавать переменную req2 а написали return\n//         setTimeout(() => {\n//             product.status = 'order';\n//             reject();\n//         }, 2000);\n//     });\n// }).then(data => { // вставляем бывший req2 сюда\n//     data.modyfy = true;// можно добавлять не только асинхронный код с таймаутами или временем выполнения как запрос на сервер  \n//     return data;//возвращаем\n// }).then(data => {// опять принимаем и выводим\n//     console.log(data);\n// }).catch(()=>{//Пишем catch в конце сюда приходит реджект если на любом этапе кода что то пойдет не так\n//     console.error(\"Произошла ошибка\")\n// }).finally( ()=> {// прописывается в конце и работает при любом исходе - положительном или даже если что то наебнется\n//     console.log('Finally');\n//     //тут можно например очиститьформу\n// });\n\n\n\n// const test = time => {\n//     return new Promise( resolve =>{\n//         setTimeout(() => resolve(), time);\n//     });\n// };\n\n// test(1000).then(() => console.log('1000ms'));\n// test(2000).then(() => console.log('2000ms'));\n\n// Promise.all([test(1000), test(2000)]).then(() => {// Принимает в себя массив с промисами . эта хрень нужна для того чтобы убедиться что все они выполнены\n//     // ждем загрузки всех промисов и только потом что то делаем\n//     console.log('ALL');\n// });\n\n// Promise.race([test(1000), test(2000)]).then(() => {// Принимает в себя массив с промисами \n//     // после загрузки первого промиса сразу делаем что то не дожидаясь второго\n//     console.log('ALL'); \n// });\n// второй промис тоже работает но в консоль ALL попадает через секунду\n\n\n\n\n//Урок 56 Fetch API\n\n//ну эта херня круче чем xmlhttpRequest\n// API - application programmic interface\n//Интерфейс какого то ПО или приложения\n//Набор данных и возможностей который предоставляет нам готовое решение\n//Короче готовые методы и свойства\n\n//Есть сайт JSON placeholder базаданных к которой можно обращаться для тестирования\n\n// fetch('https://jsonplaceholder.typicode.com/todos/1')// если не указывать никаких параметров то то классический гет запрос\n// //из первойстрочки возвращается промис\n// //итак мыполучаем ответ\n//   .then(response => response.json())//у фетча есть метод .json. конвертирует из JSONа  Он возвращает промис. Наоснове которого можно построить дальнейшую цепочку \n//   .then(json => console.log(json))// получаем обычный джаваскриптовый объект в консоль\n\n\n\n\n// window.addEventListener('DOMContentLoaded', function() {\n\n\n//     // Forms\n\n//     const forms = document.querySelectorAll('form');\n//     const message = {\n//         loading: 'img/form/spinner.svg',\n//         success: 'Спасибо! Скоро мы с вами свяжемся',\n//         failure: 'Что-то пошло не так...'\n//     };\n\n//     forms.forEach(item => {\n//         postData(item);\n//     });\n\n//     function postData(form) {\n//         form.addEventListener('submit', (e) => {\n//             e.preventDefault();\n\n//             let statusMessage = document.createElement('img');\n//             statusMessage.src = message.loading;\n//             statusMessage.style.cssText = `\n//                 display: block;\n//                 margin: 0 auto;\n//             `;\n//             form.insertAdjacentElement('afterend', statusMessage);\n        \n//             const formData = new FormData(form);\n\n//             const object = {};// тутконвертируем только если отправляем в JSONе\n//             formData.forEach(function(value, key){\n//                 object[key] = value;\n//             });\n//             //Нувотон собсно фетч запрос вместо XmlHTTPRequest\n//             //Если внутри фетча промис попадает на ошибку которая связана с хттп протоколом он не перейдет в reject только если реально что то наебнулось\n//             // В след уроке разбирается эта херня\n//             fetch('server.php', {// в этот объект добавляются настройки.Их много но основыные это метод и бади \n//                 method: 'POST',//метод\n//                 headers: {// заголовки определяют какой контент мы отправляем.Заголовки нужны если отправляем JSON Тоже идут в объекте\n//                     'Content-Type': 'application/json'\n//                 },\n//                 body: JSON.stringify(object)//переводим в JSON формат  данные из формы. Задаем это в настройки фетча\n//                 //все - запрос отправлен\n//                 //раньше мы смотрели реквест статус 200 и когда событие совершалось выполняли определенные действия\n//             })\n//             .then(data => data.text())// еще одинметод фетча который превращает ответ от запроса в текст\n//             .then(data => {//дата - это респонс из промиса\n//                 console.log(data);// выводим респонс в консоль\n//                 showThanksModal(message.success);\n//                 statusMessage.remove();\n//             }).catch(() => {//при ошибке выводим это\n//                 showThanksModal(message.failure);\n//             }).finally(() => {//ну и влюбом случае очищаем форму\n//                 form.reset();\n//             });\n//         });\n//     }\n\n//     function showThanksModal(message) {\n//         const prevModalDialog = document.querySelector('.modal__dialog');\n\n//         prevModalDialog.classList.add('hide');\n//         openModal();\n\n//         const thanksModal = document.createElement('div');\n//         thanksModal.classList.add('modal__dialog');\n//         thanksModal.innerHTML = `\n//             <div class=\"modal__content\">\n//                 <div class=\"modal__close\" data-close>×</div>\n//                 <div class=\"modal__title\">${message}</div>\n//             </div>\n//         `;\n//         document.querySelector('.modal').append(thanksModal);\n//         setTimeout(() => {\n//             thanksModal.remove();\n//             prevModalDialog.classList.add('show');\n//             prevModalDialog.classList.remove('hide');\n//             closeModal();\n//         }, 4000);\n//     }\n// });\n\n\n\n\n//Урок 57 методы перебора массивов\n\n\n//Про forEach не забываемок)\n//фо ич перебирает массив но не возвращает новый\n\n//filter\n\n\n// const names = ['Kate', 'Olga', 'Nika', 'VeroNIKA'];\n\n// const shortNames = names.filter(function (item) {// аргумент item это каждый отдельный прербираемый элемент массива\n//     return item.length < 5;// вернуть все имена длина которых меньше 5 символов и сформировать из них новый массив\n// });\n\n// console.log(shortNames);\n\n\n\n// map позволяет взять исходный массив и изменить каждый массив внутри него\n\n// const answers = ['IvAn', 'AnaA', 'HellO'];\n\n// const result = answers.map(item => {// Каждый элемент в ловеркейс\n//     return item.toLowerCase()\n// });\n\n// console.log(result);\n\n\n// every/some возвращают либо true либо false\n\n// const some = [4, 'qwq', 'irikf'];\n\n// console.log(some.some(item => typeof(item) === 'number'));// >>> true если хоть один элемент подходит по критериям. в такой стрелочной функкции return подставляется сам\n\n// console.log(some.every(item => typeof(item) === 'number'));// >>> true если все элементы подходят по условию\n\n\n//reduce схлопывает массив в одно значение\n\n\n// const arr = [4, 5, 1, 3, 2, 6];\n// // первый аргумент sum - сумма всех элементов. Изнаячально равен 0. \n// //current это как item в переборе\n\n// const  res = arr.reduce((sum, current) => sum + current);\n// console.log(res);\n\n// теперь reduce со строками\n\n// const arr = ['apple', 'pear', 'pulm'];\n// //допустим нам надо сделатьсписок через запятую\n// const res = arr.reduce((sum, current) => `${sum}, ${current}`);\n\n// console.log(res);\n\n// const arr = [4, 5, 1, 3, 2, 6];\n// const  res = arr.reduce((sum, current) => sum + current, 3);// 3 - это начпльное значение.То есть 4 будет прибавляться к 3 а не к 0 как было по умолчанию\n//  console.log(res);\n\n\n\n\n// const obj = {\n//     ivan:'persone',\n//     ann:'persone',\n//     dog:'animal',\n//     cat:'animal'\n// };\n\n// Допустим задача достать имена людей\n\n// const newArr = Object.entries(obj);// превращет объект в массив массивов\n\n// console.log(newArr);\n\n\n\n// const newArr = Object.entries(obj)\n// .filter(item => item[1] === 'persone')// чейнинг//массив с 2 массивами где второй элемент равен стороке 'persone'\n// .map(item => item[0]);// теперь каждый массив возвращаем только с первым элементом\n\n// console.log(newArr);// получим в консоль массив с 2 массивами где второй элемент равен стороке 'persone'\n\n\n\n\n\n//Урок 58 Подробно про npm и проект. JSON сервер\n\n//npm - кусочки готового кода которые можно вставлять себе в проект\n\n//добавили файл с настройками в проект package.json и установили короче через консоль джейсон сервер\n\n// нихуя не понял запоминать не собираюсь\n\n//вроде это чтобы эмулировать бек энд\n\n\n//прикрепили базу данных впроект и установили большую папку с готовыми кусками кода\n//по хорошему ее надо настроить чтобы она в гит не пушилась но у меня все наебнулось с гитом\n\n\n//итак обращаемся  к базе\n\n\n// fetch('http://localhost:3000/menu')// этот адрес показывается при открытии этогофайла через джейсон сервер через коноль\n// .then(data => data.json())// разджейсониваем)\n// .then(res => console.log(res));\n\n\n\n\n\n\n//Урок 59 получение данных с сервера Async/Await ES8\\\n\n// тут 2 части: используем фетч для постинга ну и собираем карточки по запросу наервер \n\n\n//Короче задача получить данные от сервера и записать на основе этих данных карточки \n//npx json-server --watch db.json пиши в консоль потому что командаиз курса у тебя не работает \n\n// window.addEventListener('DOMContentLoaded', function() {\n\n//     // Tabs\n    \n// \tlet tabs = document.querySelectorAll('.tabheader__item'),\n// \t\ttabsContent = document.querySelectorAll('.tabcontent'),\n// \t\ttabsParent = document.querySelector('.tabheader__items');\n\n// \tfunction hideTabContent() {\n        \n//         tabsContent.forEach(item => {\n//             item.classList.add('hide');\n//             item.classList.remove('show', 'fade');\n//         });\n\n//         tabs.forEach(item => {\n//             item.classList.remove('tabheader__item_active');\n//         });\n// \t}\n\n// \tfunction showTabContent(i = 0) {\n//         tabsContent[i].classList.add('show', 'fade');\n//         tabsContent[i].classList.remove('hide');\n//         tabs[i].classList.add('tabheader__item_active');\n//     }\n    \n//     hideTabContent();\n//     showTabContent();\n\n// \ttabsParent.addEventListener('click', function(event) {\n// \t\tconst target = event.target;\n// \t\tif(target && target.classList.contains('tabheader__item')) {\n//             tabs.forEach((item, i) => {\n//                 if (target == item) {\n//                     hideTabContent();\n//                     showTabContent(i);\n//                 }\n//             });\n// \t\t}\n//     });\n    \n//     // Timer\n\n//     const deadline = '2020-05-11';\n\n//     function getTimeRemaining(endtime) {\n//         const t = Date.parse(endtime) - Date.parse(new Date()),\n//             days = Math.floor( (t/(1000*60*60*24)) ),\n//             seconds = Math.floor( (t/1000) % 60 ),\n//             minutes = Math.floor( (t/1000/60) % 60 ),\n//             hours = Math.floor( (t/(1000*60*60) % 24) );\n\n//         return {\n//             'total': t,\n//             'days': days,\n//             'hours': hours,\n//             'minutes': minutes,\n//             'seconds': seconds\n//         };\n//     }\n\n//     function getZero(num){\n//         if (num >= 0 && num < 10) { \n//             return '0' + num;\n//         } else {\n//             return num;\n//         }\n//     }\n\n//     function setClock(selector, endtime) {\n\n//         const timer = document.querySelector(selector),\n//             days = timer.querySelector(\"#days\"),\n//             hours = timer.querySelector('#hours'),\n//             minutes = timer.querySelector('#minutes'),\n//             seconds = timer.querySelector('#seconds'),\n//             timeInterval = setInterval(updateClock, 1000);\n\n//         updateClock();\n\n//         function updateClock() {\n//             const t = getTimeRemaining(endtime);\n\n//             days.innerHTML = getZero(t.days);\n//             hours.innerHTML = getZero(t.hours);\n//             minutes.innerHTML = getZero(t.minutes);\n//             seconds.innerHTML = getZero(t.seconds);\n\n//             if (t.total <= 0) {\n//                 clearInterval(timeInterval);\n//             }\n//         }\n//     }\n\n//     setClock('.timer', deadline);\n\n//     // Modal\n\n//     const modalTrigger = document.querySelectorAll('[data-modal]'),\n//         modal = document.querySelector('.modal');\n\n//     modalTrigger.forEach(btn => {\n//         btn.addEventListener('click', openModal);\n//     });\n\n//     function closeModal() {\n//         modal.classList.add('hide');\n//         modal.classList.remove('show');\n//         document.body.style.overflow = '';\n//     }\n\n//     function openModal() {\n//         modal.classList.add('show');\n//         modal.classList.remove('hide');\n//         document.body.style.overflow = 'hidden';\n//         clearInterval(modalTimerId);\n//     }\n\n//     modal.addEventListener('click', (e) => {\n//         if (e.target === modal || e.target.getAttribute('data-close') == \"\") {\n//             closeModal();\n//         }\n//     });\n\n//     document.addEventListener('keydown', (e) => {\n//         if (e.code === \"Escape\" && modal.classList.contains('show')) { \n//             closeModal();\n//         }\n//     });\n\n//     const modalTimerId = setTimeout(openModal, 300000);\n//     // Изменил значение, чтобы не отвлекало\n\n//     function showModalByScroll() {\n//         if (window.pageYOffset + document.documentElement.clientHeight >= document.documentElement.scrollHeight) {\n//             openModal();\n//             window.removeEventListener('scroll', showModalByScroll);\n//         }\n//     }\n//     window.addEventListener('scroll', showModalByScroll);\n\n//     // Используем классы для создание карточек меню\n\n//     class MenuCard {\n//         constructor(src, alt, title, descr, price, parentSelector, ...classes) {\n//             this.src = src;\n//             this.alt = alt;\n//             this.title = title;\n//             this.descr = descr;\n//             this.price = price;\n//             this.classes = classes;\n//             this.parent = document.querySelector(parentSelector);\n//             this.transfer = 27;\n//             this.changeToUAH(); \n//         }\n\n//         changeToUAH() {\n//             this.price = this.price * this.transfer; \n//         }\n\n//         render() {\n//             const element = document.createElement('div');\n\n//             if (this.classes.length === 0) {\n//                 this.classes = \"menu__item\";\n//                 element.classList.add(this.classes);\n//             } else {\n//                 this.classes.forEach(className => element.classList.add(className));\n//             }\n\n//             element.innerHTML = `\n//                 <img src=${this.src} alt=${this.alt}>\n//                 <h3 class=\"menu__item-subtitle\">${this.title}</h3>\n//                 <div class=\"menu__item-descr\">${this.descr}</div>\n//                 <div class=\"menu__item-divider\"></div>\n//                 <div class=\"menu__item-price\">\n//                     <div class=\"menu__item-cost\">Цена:</div>\n//                     <div class=\"menu__item-total\"><span>${this.price}</span> грн/день</div>\n//                 </div>\n//             `;\n//             this.parent.append(element);\n//         }\n//     }\n\n//     getResource('http://localhost:3000/menu')// вызываем функцию и вставляем путь из JSON сервера \n//         .then(data => {// разу используем те данные которые прийдут с сервера из функции написанной ниже \n//             data.forEach(({img, altimg, title, descr, price}) => {// метод фо ич переберет, деструктуризирет объект который пришелс сервера и передаст инфу в конструктор карточек насайте который их уже запишет в HTML\n//                 new MenuCard(img, altimg, title, descr, price, \".menu .container\").render();// вызываем конструктор для каждого объекта внутри массива который прийдет из сервера. НУ и потом рендер\n//                 //тут используется синтаксис деструктуризации обхекта чтобывытащить отдельные свойства в качестве отдельных элементов\n//             });\n//         });\n\n//         // второй вариант создания карточек через функцию а не класс - конструктор. Сходу. Сразу в ебало\n//     // getResource('http://localhost:3000/menu')\n//     //     .then(data => createCard(data));\n\n//     // function createCard(data) {\n//     //     data.forEach(({img, altimg, title, descr, price}) => {\n//     //         const element = document.createElement('div');\n\n//     //         element.classList.add(\"menu__item\");\n\n//     //         element.innerHTML = `\n//     //             <img src=${img} alt=${altimg}>\n//     //             <h3 class=\"menu__item-subtitle\">${title}</h3>\n//     //             <div class=\"menu__item-descr\">${descr}</div>\n//     //             <div class=\"menu__item-divider\"></div>\n//     //             <div class=\"menu__item-price\">\n//     //                 <div class=\"menu__item-cost\">Цена:</div>\n//     //                 <div class=\"menu__item-total\"><span>${price}</span> грн/день</div>\n//     //             </div>\n//     //         `;\n//     //         document.querySelector(\".menu .container\").append(element);\n//     //     });\n//     // }\n\n//     // Forms\n\n//     const forms = document.querySelectorAll('form');\n//     const message = {\n//         loading: 'img/form/spinner.svg',\n//         success: 'Спасибо! Скоро мы с вами свяжемся',\n//         failure: 'Что-то пошло не так...'\n//     };\n\n//     forms.forEach(item => {\n//         bindPostData(item);// на каждую форму вешаем эту функцию\n//     });\n\n//     //async тут обозначает что будет асинхронный код. Всегда идет в парес await. Async пишется в самом начале и говорит что дальше будет код который надо будет дождаться\n//     const postData = async (url, data) => {//эта функция будет настраивать наш запрос после трансформировать его и возвращать\n//         let res = await fetch(url, {// в эту переменную помещаем промис от фетча и записываем аргументы которые будут передаваться в эту функцию при вызове \n//             // записываем адрем фетча и бади как аргументы\n//             //помни что это асинхронный код и мы не знаем сколько будет идти фетч\n//             //и если дальше будет идти код то он будет обрабатывать пустую переменную res\n//             //поэтому пишем await чтобы код дожидался результата запроса\n//             method: \"POST\",\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             },\n//             body: data\n//         });\n    \n//         return await res.json();// возвращаем промис отсюда чтобы потом обработать через цепочку .then'ов\n//         // await тут стоит для того чтобы дождаться конвертирования вместо того чтобы сразу передавать этот промис\n//     };\n\n//     async function getResource(url) {// эта функция чтобы получать карточки с сервера\n//         let res = await fetch(url);// делаем запрос, дожидаемся его окончания\n//     // если фетч сталкивается с ошибкой в http запросе то он не выдает catch. Типо это для него не ошибка.Дальше мы это фиксим\n//         if (!res.ok) {//у промиса который возвращается из фетча есть свойство .ok типо все заебись\n//             throw new Error(`Could not fetch ${url}, status: ${res.status}`);//new Error это объект ошибки вовнутрь помещается текст ошибки которую надо выдать.\n//             //throw выкидывает эту ошибку. у этого промиса есть свойство .status ну его и помещаем в сообщение об ошибке\n//         }\n    \n//         return await res.json();// трансформируем в нормальный джаваскриптовый объект и возвращаем предварительно подождав окончания конвертации\n//     }\n\n//     function bindPostData(form) {//переименовали в \"Привязать какой то постинг дат\"\n//         form.addEventListener('submit', (e) => {\n//             e.preventDefault();\n\n//             let statusMessage = document.createElement('img');\n//             statusMessage.src = message.loading;\n//             statusMessage.style.cssText = `\n//                 display: block;\n//                 margin: 0 auto;\n//             `;\n//             form.insertAdjacentElement('afterend', statusMessage);\n        \n//             const formData = new FormData(form);\n\n//             const json = JSON.stringify(Object.fromEntries(formData.entries()));// другойспособ перебора formData. Применяем метод entries на formData и делаем из него массив массивовкак показано ниже\n//             //далее к этой херне  применяем Object.fromEntries чтобы сделать его обратно объектом а после этого мы этот объект преврвщаем в JSON и отправляем нахуй на сервер\n//             // к примеру как работает Object.Entries\n//             // const obj = {a:23, b:50}\n//             // console.log(Object.entries(obj));// >>> [ [ 'a', 23 ], [ 'b', 50 ] ]\n//             postData('http://localhost:3000/requests', json)//вызываем postData и передаем аргументы\n//             // обращаемся через json server\n//             .then(data => {// дальше оповещаем пользователя тут понятно\n//                 console.log(data);\n//                 showThanksModal(message.success);\n//                 statusMessage.remove();\n//             }).catch(() => {\n//                 showThanksModal(message.failure);\n//             }).finally(() => {\n//                 form.reset();\n//             });\n//         });\n//     }\n\n//     function showThanksModal(message) {\n//         const prevModalDialog = document.querySelector('.modal__dialog');\n\n//         prevModalDialog.classList.add('hide');\n//         openModal();\n\n//         const thanksModal = document.createElement('div');\n//         thanksModal.classList.add('modal__dialog');\n//         thanksModal.innerHTML = `\n//             <div class=\"modal__content\">\n//                 <div class=\"modal__close\" data-close>×</div>\n//                 <div class=\"modal__title\">${message}</div>\n//             </div>\n//         `;\n//         document.querySelector('.modal').append(thanksModal);\n//         setTimeout(() => {\n//             thanksModal.remove();\n//             prevModalDialog.classList.add('show');\n//             prevModalDialog.classList.remove('hide');\n//             closeModal();\n//         }, 4000);\n//     }\n// });\n\n\n\n\n\n\n\n\n//Урок 60.Библиотеки.Axios\n\n\n//Библиотека - участок кода который решает определенную проблему - готовое решение\n// по размеру могут быть совсем разные\n//Библиотека всегда помещается перед главным скриптом в HTML\n// Axious помогает работать с сервером.Много вещей не нужно прописывать вручную\n\n//Итак копирую часть кода из предыдущего урока но без моих комментариев\n\n\n// Используем классы для создания карточек меню\n\n// class MenuCard {\n//     constructor(src, alt, title, descr, price, parentSelector, ...classes) {\n//         this.src = src;\n//         this.alt = alt;\n//         this.title = title;\n//         this.descr = descr;\n//         this.price = price;\n//         this.classes = classes;\n//         this.parent = document.querySelector(parentSelector);\n//         this.transfer = 27;\n//         this.changeToUAH(); \n//     }\n\n//     changeToUAH() {\n//         this.price = this.price * this.transfer; \n//     }\n\n//     render() {\n//         const element = document.createElement('div');\n\n//         if (this.classes.length === 0) {\n//             this.classes = \"menu__item\";\n//             element.classList.add(this.classes);\n//         } else {\n//             this.classes.forEach(className => element.classList.add(className));\n//         }\n\n//         element.innerHTML = `\n//             <img src=${this.src} alt=${this.alt}>\n//             <h3 class=\"menu__item-subtitle\">${this.title}</h3>\n//             <div class=\"menu__item-descr\">${this.descr}</div>\n//             <div class=\"menu__item-divider\"></div>\n//             <div class=\"menu__item-price\">\n//                 <div class=\"menu__item-cost\">Цена:</div>\n//                 <div class=\"menu__item-total\"><span>${this.price}</span> грн/день</div>\n//             </div>\n//         `;\n//         this.parent.append(element);\n//     }\n// }\n// // комментируем вот эту тему и будем делать тоже самое но через библиотеку \n// // getResource('http://localhost:3000/menu')\n// //     .then(data => {\n// //         data.forEach(({img, altimg, title, descr, price}) => {\n// //             new MenuCard(img, altimg, title, descr, price, \".menu .container\").render();\n// //         });\n// //     });\n\n\n// axios.get('http://localhost:3000/menu') // обращаемся к переменной заданной из файла библиотеки\n//     .then(data => {// ну дальше полученный объект из этого запроса мы заливаем на сайт и строим из него карточки  \n//         data.data.forEach(({// 2 разо обращаемся к data первое это аргумент then'а. Второй раз обращаемся к data внутри волученного объекта с сервера потому что они приходит подробнее с разными свойствами(можешь посмотреть в браузере) \n//             img,altimg,title,descr,price}) => {//деструктурируем полученнй массив чтобы по отдельности запихивать свойства в конструктор\n//             new MenuCard(img, altimg, title, descr, price, \".menu .container\").render();//ну и запихиваем эти свойства в конструктор\n//         });\n//     });\n    \n//     // методы обработки ошибок конвератция и вся вот эта дрочь идут уже без нашего участия \n\n// // Forms\n\n// const forms = document.querySelectorAll('form');\n// const message = {\n//     loading: 'img/form/spinner.svg',\n//     success: 'Спасибо! Скоро мы с вами свяжемся',\n//     failure: 'Что-то пошло не так...'\n// };\n\n// forms.forEach(item => {\n//     bindPostData(item);\n// });\n\n// const postData = async (url, data) => {\n//     let res = await fetch(url, {\n//         method: \"POST\",\n//         headers: {\n//             'Content-Type': 'application/json'\n//         },\n//         body: data\n//     });\n\n//     return await res.json();\n// };\n\n// async function getResource(url) {\n//     let res = await fetch(url);\n\n//     if (!res.ok) {\n//         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\n//     }\n\n//     return await res.json();\n// }\n\n// function bindPostData(form) {\n//     form.addEventListener('submit', (e) => {\n//         e.preventDefault();\n\n//         let statusMessage = document.createElement('img');\n//         statusMessage.src = message.loading;\n//         statusMessage.style.cssText = `\n//             display: block;\n//             margin: 0 auto;\n//         `;\n//         form.insertAdjacentElement('afterend', statusMessage);\n    \n//         const formData = new FormData(form);\n\n//         const json = JSON.stringify(Object.fromEntries(formData.entries()));\n\n//         postData('http://localhost:3000/requests', json)\n//         .then(data => {\n//             console.log(data);\n//             showThanksModal(message.success);\n//             statusMessage.remove();\n//         }).catch(() => {\n//             showThanksModal(message.failure);\n//         }).finally(() => {\n//             form.reset();\n//         });\n//     });\n// }\n\n// function showThanksModal(message) {\n//     const prevModalDialog = document.querySelector('.modal__dialog');\n\n//     prevModalDialog.classList.add('hide');\n//     openModal();\n\n//     const thanksModal = document.createElement('div');\n//     thanksModal.classList.add('modal__dialog');\n//     thanksModal.innerHTML = `\n//         <div class=\"modal__content\">\n//             <div class=\"modal__close\" data-close>×</div>\n//             <div class=\"modal__title\">${message}</div>\n//         </div>\n//     `;\n//     document.querySelector('.modal').append(thanksModal);\n//     setTimeout(() => {\n//         thanksModal.remove();\n//         prevModalDialog.classList.add('show');\n//         prevModalDialog.classList.remove('hide');\n//         closeModal();\n//     }, 4000);\n// }\n\n\n\n\n\n\n\n//Урок 61 создаем слайдер.Вариант 1\n//ну делаю сам значит \n\n// //Получаем все слайды\n// const slides = document.querySelectorAll('.offer__slide');\n// //получаю стрелки\n// const slidePrev = document.querySelector('.offer__slider-prev'),\n//       slideNext = document.querySelector('.offer__slider-next');\n\n// const current = document.querySelector('#current');\n// const total = document.querySelector('#total')\n\n// function hideSlides() {//собака - слайдо закрывака\n\n//     slides.forEach(item => {\n//         item.classList.add('hide');\n//         item.classList.remove('show', 'fade');\n//     });\n// };\n\n\n// function showSlides(i=0) {// собака слайдо - открывака \n//     slides[i].classList.add('show', 'fade');\n//     slides[i].classList.remove('hide');\n// }\n\n\n// hideSlides();\n// showSlides();\n\n// let slideIndex = 0;\n\n// slideNext.addEventListener('click',  function () {\n//     slideIndex++;\n//     if(slideIndex === slides.length){\n//         slideIndex = 0;\n//     }\n//     hideSlides();\n//     showSlides(slideIndex);\n//     current.textContent = `${getZero(slideIndex + 1)}`;\n    \n//  });\n\n//  slidePrev.addEventListener('click',  function () {\n//     slideIndex--;\n//     if(slideIndex === -1){\n//         slideIndex = slides.length - 1;\n//     }\n//     hideSlides();\n//     showSlides(slideIndex);\n//     current.textContent = `${getZero(slideIndex + 1)}`;\n    \n//  });\n\n\n\n// function getZero(num) { // подставляем 0 если значение меньше 10 чтобы не торчала цифра\n//     if (num >= 0 && num < 10) {\n//         return '0' + num;\n//     } else {\n//         return num;\n//     }\n// }\n\n// total.textContent = `${getZero(slides.length)}`// общее количество слайдов\n\n// ну вроде все работает нормально\n\n// теперь как из урока\n\n // Slider\n\n//  let slideIndex = 1;// так здесь индекс сразу 1\n//  const slides = document.querySelectorAll('.offer__slide'),\n//      prev = document.querySelector('.offer__slider-prev'),\n//      next = document.querySelector('.offer__slider-next'),\n//      total = document.querySelector('#total'),\n//      current = document.querySelector('#current');\n// // переменные те же самые все\n//  showSlides(slideIndex);\n\n//  if (slides.length < 10) {// подставлятель нулей для тотала\n//      total.textContent = `0${slides.length}`;\n//  } else {\n//      total.textContent = slides.length;\n//  }\n\n//  function showSlides(n) {// 1 функция в которую передается слайд индекс\n//      if (n > slides.length) {\n//          slideIndex = 1;\n//      }\n//      if (n < 1) {\n//          slideIndex = slides.length;\n//      }\n// // проверялки у него в 1 функции\n//      slides.forEach((item) => item.style.display = 'none');\n\n//      slides[slideIndex - 1].style.display = 'block'; // Как ваша самостоятельная работа - переписать на использование классов show/hide\n     \n//      if (slides.length < 10) {//подставлятель нулей для каррента\n//          current.textContent =  `0${slideIndex}`;\n//      } else {\n//          current.textContent =  slideIndex;\n//      }\n//  }\n\n//  function plusSlides (n) {// короче у кнопки меняют только индекс через 1 функцию\n//      showSlides(slideIndex += n);\n//  }\n\n//  prev.addEventListener('click', function(){\n//      plusSlides(-1);\n//  });\n\n//  next.addEventListener('click', function(){\n//      plusSlides(1);\n//  });\n\n\n\n\n\n// Урок 62. Слайдер 2.0\n// короче  идея как с замком с колесом и циферками\n// есть внешний элемент в HTML offer__slider-wrapper у него оверфлоу хидден\n// есть внутренний элемент offer__slider-inner который по ширине больше чем внешний и содержит все слайды \n// при клике на стрелочку будет происходить transform внутренней обертки и она будет смещаться\n // Slider\n\n//  let offset = 0;\n//  let slideIndex = 1;\n\n//  const slides = document.querySelectorAll('.offer__slide'),\n//      prev = document.querySelector('.offer__slider-prev'),\n//      next = document.querySelector('.offer__slider-next'),\n//      total = document.querySelector('#total'),\n//      current = document.querySelector('#current'),\n//      slidesWrapper = document.querySelector('.offer__slider-wrapper'),//внешний(окошко)\n//      width = window.getComputedStyle(slidesWrapper).width,// это ширина окошка выводим ее через getComputedStyle(slidesWrapper).width выдает примененные стили\n//      slidesField = document.querySelector('.offer__slider-inner');// внутренний\n\n//  if (slides.length < 10) {\n//      total.textContent = `0${slides.length}`;\n//      current.textContent =  `0${slideIndex}`;\n//  } else {\n//      total.textContent = slides.length;\n//      current.textContent =  slideIndex;\n//  }\n \n//  slidesField.style.width = 100 * slides.length + '%';// это ширина блока который будет содержать все слайды\n//  slidesField.style.display = 'flex';// чтобы сделать их в строчку\n//  slidesField.style.transition = '0.5s all';// добавляем плавности\n\n//  slidesWrapper.style.overflow = 'hidden';// чтобы не торчало\n\n//  slides.forEach(slide => {// к каждому слайду утанавливаем определенную ширину из переменной\n//      slide.style.width = width;\n//  });\n\n//  next.addEventListener('click', () => {\n//      if (offset == (+width.slice(0, width.length - 2) * (slides.length - 1))) {// в переменной шарины лежит значение \"500px\" поэтому мы обрезаем пиксели чтобы получить число. Ну адальше умножаем на количество слайдов\n//      //так мы определаяем когда вся лентапрокручена и возвращаем ее в начало\n//          offset = 0;\n//      } else {\n//          offset += +width.slice(0, width.length - 2); // если лента еще не закончилась то смещаем ее на ширину внешней обертки\n//          // += оператор добавления\n//      }\n\n//      slidesField.style.transform = `translateX(-${offset}px)`;// добавляем стиль который перемещает нашу ленту\n// // ну а это уже счетчик слайдов\n//      if (slideIndex == slides.length) {\n//          slideIndex = 1;\n//      } else {\n//          slideIndex++;\n//      }\n// // а это добавлятель нулей\n//      if (slides.length < 10) {\n//          current.textContent =  `0${slideIndex}`;\n//      } else {\n//          current.textContent =  slideIndex;\n//      }\n//  });\n\n//  prev.addEventListener('click', () => {\n//      if (offset == 0) {// тут то же самое но наоборот\n//          offset = +width.slice(0, width.length - 2) * (slides.length - 1);\n//      } else {\n//          offset -= +width.slice(0, width.length - 2);// -= оператор отнимания\n//      }\n\n//      slidesField.style.transform = `translateX(-${offset}px)`;\n\n//      if (slideIndex == 1) {\n//          slideIndex = slides.length;\n//      } else {\n//          slideIndex--;\n//      }\n\n//      if (slides.length < 10) {\n//          current.textContent =  `0${slideIndex}`;\n//      } else {\n//          current.textContent =  slideIndex;\n//      }\n//  });\n\n\n\n\n\n\n//Урок 63 навигация для слайдов\n\n//Получаем как элемент весь слайдер.Делаеем его релатив/готово\n// обертка для этих точек + абсолютное позиционирование/готово\n//Перебирающий метод - количество точек должно быть равно количеству слайдов/готово\n// каждой точке атрибут чтобы они были связаны/готово\n//класс активности / готово\n// кликаем в каждую из точек - перемещаемся на соответствующий слайд/ готово. Потно\n\n\n//Slider\n\n// let offset = 0;\n// let slideIndex = 1;\n\n// const slides = document.querySelectorAll('.offer__slide'),\n//     prev = document.querySelector('.offer__slider-prev'),\n//     next = document.querySelector('.offer__slider-next'),\n//     total = document.querySelector('#total'),\n//     current = document.querySelector('#current'),\n//     slidesWrapper = document.querySelector('.offer__slider-wrapper'), //внешний(окошко)\n//     width = window.getComputedStyle(slidesWrapper).width, // это ширина окошка выводим ее через getComputedStyle(slidesWrapper).width выдает примененные стили\n//     slidesField = document.querySelector('.offer__slider-inner'), // внутренний\n//     wholeSlider = document.querySelector('.offer__slider'); // получили слайдер целиком\n\n\n// if (slides.length < 10) {\n//     total.textContent = `0${slides.length}`;\n//     current.textContent = `0${slideIndex}`;\n// } else {\n//     total.textContent = slides.length;\n//     current.textContent = slideIndex;\n// }\n\n// slidesField.style.width = 100 * slides.length + '%'; // это ширина блока который будет содержать все слайды\n// slidesField.style.display = 'flex'; // чтобы сделать их в строчку\n// slidesField.style.transition = '0.5s all'; // добавляем плавности\n\n// slidesWrapper.style.overflow = 'hidden'; // чтобы не торчало\n\n// slides.forEach(slide => { // к каждому слайду утанавливаем определенную ширину из переменной\n//     slide.style.width = width;\n// });\n\n// next.addEventListener('click', () => {\n//     if (offset == (+width.slice(0, width.length - 2) * (slides.length - 1))) { // в переменной шарины лежит значение \"500px\" поэтому мы обрезаем пиксели чтобы получить число. Ну адальше умножаем на количество слайдов\n//         //так мы определаяем когда вся лентапрокручена и возвращаем ее в начало\n//         offset = 0;\n//     } else {\n//         offset += +width.slice(0, width.length - 2); // если лента еще не закончилась то смещаем ее на ширину внешней обертки\n//         // += оператор добавления\n//     }\n\n//     slidesField.style.transform = `translateX(-${offset}px)`; // добавляем стиль который перемещает нашу ленту\n\n//     dots.forEach(item => {//убарлвсе классы актив\n//         item.classList.remove('dots__active');\n//     });\n       \n\n//     // ну а это уже счетчик слайдов\n//     if (slideIndex == slides.length) {\n//         slideIndex = 1;\n//     } else {\n//         slideIndex++;\n//     }\n\n//     dots[slideIndex - 1].classList.add('dots__active');// уже после рассчета добавляем класс\n\n//     // а это добавлятель нулей\n//     if (slides.length < 10) {\n//         current.textContent = `0${slideIndex}`;\n//     } else {\n//         current.textContent = slideIndex;\n//     }\n// });\n\n// prev.addEventListener('click', () => {\n//     if (offset == 0) { // тут то же самое но наоборот\n//         offset = +width.slice(0, width.length - 2) * (slides.length - 1);\n//     } else {\n//         offset -= +width.slice(0, width.length - 2); // -= оператор отнимания\n//     }\n\n//     slidesField.style.transform = `translateX(-${offset}px)`;\n\n//     dots.forEach(item => {//убарлвсе классы актив\n//         item.classList.remove('dots__active');\n//     });\n\n//     if (slideIndex == 1) {\n//         slideIndex = slides.length;\n//     } else {\n//         slideIndex--;\n//     }\n\n//     dots[slideIndex - 1].classList.add('dots__active');// уже после рассчета добавляем класс.Бинго нахуй\n\n\n//     if (slides.length < 10) {\n//         current.textContent = `0${slideIndex}`;\n//     } else {\n//         current.textContent = slideIndex;\n//     }\n// });\n\n// //поехали\n// wholeSlider.style.position = 'relative';\n\n// const dotsWrapper = document.createElement('div');\n// dotsWrapper.classList.add('carousel-indicators');\n// // dotsWrapper.style.position = \"absolute\";\n// // dotsWrapper.style.bottom = \"-50px\";\n// // dotsWrapper.style.left =  '100px';\n// wholeSlider.append(dotsWrapper);\n\n// slides.forEach(() => {\n//    const dot = document.createElement('div');\n//    dot.classList.add('dot');\n//    dotsWrapper.append(dot);\n// })\n\n// slidesField.style.transform = `translateX(0px)`;//этобы этот стиль был всегда а не добавлялся после смещения но вроде будет работать и без него\n// const dots = document.querySelectorAll('.dot');//вот эту штуку можно писать толко после того как все точки сформируется на странице\n// dots[0].classList.add('dots__active');\n// dotsWrapper.addEventListener('click', function(event) {// делегирование через родителя на все кнопки\n//     const target = event.target;// чтобы постоянноне писать евент.таргет\n    \n//     if(target && target.classList.contains('dot')) {// тут проверка содержания класса внутри родителя определяем что мы точно кликнули в дот\n//         dots.forEach((item, i) => {// надо определить номер дота чтобы знать какой показывать\n//             if (target == item) {// если кликнутый дот равен перебераемому то вызываем функции\n//                 offset = (+width.slice(0, width.length - 2) * i);\n//                slidesField.style.transform = `translateX(-${offset}px)`;\n//                dots.forEach(item=>{\n//                 item.classList.remove('dots__active');\n//                });\n//                target.classList.add('dots__active');\n\n//                slideIndex = i + 1;\n\n//                if (slides.length < 10) {\n//                    current.textContent = `0${slideIndex}`;\n//                } else {\n//                    current.textContent = slideIndex;\n//                }\n\n               \n\n//             }\n\n//         });\n//     }\n// });\n\n\n\n//Теперь как сделал Ваня\n\n// Slider\n\n// let offset = 0;\n// let slideIndex = 1;\n\n// const slides = document.querySelectorAll('.offer__slide'),\n//     slider = document.querySelector('.offer__slider'), //тоже получил родителя\n//     prev = document.querySelector('.offer__slider-prev'),\n//     next = document.querySelector('.offer__slider-next'),\n//     total = document.querySelector('#total'),\n//     current = document.querySelector('#current'),\n//     slidesWrapper = document.querySelector('.offer__slider-wrapper'),\n//     width = window.getComputedStyle(slidesWrapper).width,\n//     slidesField = document.querySelector('.offer__slider-inner');\n\n// if (slides.length < 10) {\n//     total.textContent = `0${slides.length}`;\n//     current.textContent = `0${slideIndex}`;\n// } else {\n//     total.textContent = slides.length;\n//     current.textContent = slideIndex;\n// }\n\n// slidesField.style.width = 100 * slides.length + '%';\n// slidesField.style.display = 'flex';\n// slidesField.style.transition = '0.5s all';\n\n// slidesWrapper.style.overflow = 'hidden';\n\n// slides.forEach(slide => {\n//     slide.style.width = width;\n// });\n\n// slider.style.position = 'relative'; // позишн релатив для родителя\n\n// const indicators = document.createElement('ol'), // тут список а не дивы\n//     dots = [];// вместо кверри селектор олл.Это настоящиймассив и унего есть метод push\n// indicators.classList.add('carousel-indicators'); // тут он не стал добавлять в цсс а сразу написал в JS\n// indicators.style.cssText = `\n//      position: absolute;\n//      right: 0;\n//      bottom: 0;\n//      left: 0;\n//      z-index: 15;\n//      display: flex;\n//      justify-content: center;\n//      margin-right: 15%;\n//      margin-left: 15%;\n//      list-style: none;\n//  `; // Если хотите - добавьте в стили, но иногда у нас нет доступа к стилям\n// slider.append(indicators);\n\n// for (let i = 0; i < slides.length; i++) { // делает доты на основе количества слайдов просто через фор\n//     const dot = document.createElement('li');\n//     dot.setAttribute('data-slide-to', i + 1); // добавил к каждой точке атрибут я не стал это делать. Оказывается можно указывать значение этого атрибута\n//     dot.style.cssText = `\n//          box-sizing: content-box;\n//          flex: 0 1 auto;\n//          width: 30px;\n//          height: 6px;\n//          margin-right: 3px;\n//          margin-left: 3px;\n//          cursor: pointer;\n//          background-color: #fff;\n//          background-clip: padding-box;\n//          border-top: 10px solid transparent;\n//          border-bottom: 10px solid transparent;\n//          opacity: .5;\n//          transition: opacity .6s ease;\n//      `;\n//     if (i == 0) {// это что то вроде класа active\n//         dot.style.opacity = 1;\n//     }\n//     indicators.append(dot);\n//     dots.push(dot);// засовываем в массив\n// }\n\n// next.addEventListener('click', () => {\n//     if (offset == (+width.slice(0, width.length - 2) * (slides.length - 1))) {\n//         offset = 0;\n//     } else {\n//         offset += +width.slice(0, width.length - 2);\n//     }\n\n//     slidesField.style.transform = `translateX(-${offset}px)`;\n\n//     if (slideIndex == slides.length) {\n//         slideIndex = 1;\n//     } else {\n//         slideIndex++;\n//     }\n\n//     if (slides.length < 10) {\n//         current.textContent = `0${slideIndex}`;\n//     } else {\n//         current.textContent = slideIndex;\n//     }\n\n//     dots.forEach(dot => dot.style.opacity = \".5\");// вместо класса эктив\n//     dots[slideIndex - 1].style.opacity = 1;\n// });\n\n// prev.addEventListener('click', () => {\n//     if (offset == 0) {\n//         offset = +width.slice(0, width.length - 2) * (slides.length - 1);\n//     } else {\n//         offset -= +width.slice(0, width.length - 2);\n//     }\n\n//     slidesField.style.transform = `translateX(-${offset}px)`;\n\n//     if (slideIndex == 1) {\n//         slideIndex = slides.length;\n//     } else {\n//         slideIndex--;\n//     }\n\n//     if (slides.length < 10) {\n//         current.textContent = `0${slideIndex}`;\n//     } else {\n//         current.textContent = slideIndex;\n//     }\n\n//     dots.forEach(dot => dot.style.opacity = \".5\");// вместо класса active\n//     dots[slideIndex - 1].style.opacity = 1;\n// });\n\n// dots.forEach(dot => {// тут он не стал делать наследование\n//     dot.addEventListener('click', (e) => {\n//         const slideTo = e.target.getAttribute('data-slide-to');// получает атрибут для слайд индекса\n\n//         slideIndex = slideTo;\n//         offset = +width.slice(0, width.length - 2) * (slideTo - 1);// ну что то вроде моего кода но не через порядковый номер перебора а через атрибут\n\n//         slidesField.style.transform = `translateX(-${offset}px)`;//смещение ну тут уменя так же\n\n//         if (slides.length < 10) {// подставлятель нулей \n//             current.textContent = `0${slideIndex}`;\n//         } else {\n//             current.textContent = slideIndex;// меняем индикатор сверху\n//         }\n\n//         dots.forEach(dot => dot.style.opacity = \".5\");// это как класс актив\n//         dots[slideIndex - 1].style.opacity = 1;\n//     });\n// });\n\n\n\n//Урок 64 Сохраняем данные без БД. Работа с LocalStorage\n\n//LocalStorage - свойство глобального объекта window\n\n//Есть вкладка Application в браузере и там локал сторейдж\n// там 2 поля key и value то есть это обычный объект\n// в него помещается около 5 мб данных \n\n// // записываем данные в лс\n// localStorage.setItem('number', 5);// первый атрибут это ключ авторой это значение\n\n// //получаем данные\n\n// localStorage.getItem('number');// получаем 5\n\n// //удаляем данные\n// localStorage.removeItem('number');\n\n\n// //очищаем хранилище\n\n// localStorage.clear();\n\n\n\n\n// // допустим есть форма на сайте\n// const checkbox = document.querySelector('#checkbox'),\n//     form = document.querySelector('form'),\n//     change = document.querySelector('#color'); // эта кнопка меняет цвет формы\n\n//     if(localStorage.getItem('isChecked')) {// если в локал сторейдж есть такое значение то. Если его там нет то выдаст null\n//         checkbox.checked = true;// короче каждый раз при загрузке страницы проверяем есть ли галочка выставляем ее если свойство там есть\n//     }\n\n//     if (localStorage.getItem('bg') === 'changed'){ //при заходе на страницу проверяем хранилище и если что перекрашиваем\n//         form.style.backgroundColor = 'red';\n//     }\n\n// // надо чтобы если поставили чекбокс то он был с галочкой даже после пререзагрузки \n// // цвет формы тоже не должен изменяться даже после перезахода\n\n// checkbox.addEventListener('change', () => {\n//     localStorage.setItem('isChecked', true);// если вешают галочку то это записываем в хранилище\n// });\n\n\n// change.addEventListener('click', () => {\n//     if (localStorage.getItem('bg') === 'changed') { //если цвет формы изменен то убираем это свойство\n//         localStorage.removeItem('bg');\n//         form.style.backgroundColor = 'white';\n//     } else { // если на эту кнопку не нажимали(цвет формы не изменен) то добавляется айтем в хранилище и меняется бекграунд\n//         localStorage.setItem('bg', 'chanded');\n//         form.style.backgroundColor = 'red';\n//     };\n// });\n\n\n// const persone = {\n//     name: 'Alex',\n//     age: 25\n// };\n\n// const serializedPersone = JSON.stringify(persone);// туда надо засовывать JSON\n\n// localStorage.setItem('alex', serializedPersone);// сохраняем объект в хранилище\n\n// console.log(JSON.parse(localStorage.getItem('alex')));// получаем оттуда и разшифровываем\n\n\n\n\n\n//Урок 65.Регулярные выражения\n\n\n//Позволяют удобно работать со строками\n//2 части\n// 1 паттерн 2 флаги\n\n// new RegExp('pattern', 'flags'); // этим синтаксисом никто не пользуется\n// /pattern/f  этот синтаксис используют все\n\n// const ans = prompt('Введите ваше имя');\n\n// const reg = /n/;\n\n// console.log(ans.search(reg));// >>>> выдаст позицию первого найденного символа если не найдет то выдаст -1\n\n// const reg = /n/i;\n// //флаги\n// //i - найти вне зависимости от регистра\n// //g - найти несколько вхождений (глобал)\n// //m - многострочный режим\n// console.log(ans.search(reg));// с методом search g не работает он ищет первое совпадение\n\n// const reg = /n/ig;\n// console.log(ans.match(reg));// дает больше инфы и если есть флаг глобальности то выдаст массив со всеми результатами\n\n\n// const pass = prompt('Password');\n\n// console.log (pass.replace(/./g, '*'));// в replace первый аргумент идет то на что мы хотим заменить \n// //второй аргумент - на что\n// // в регулярных выражениях  если стоит точка внутри /./ то это значит мы берем все элементы которые попадут в строку\n// //чтоб взять точку то надо экранировать этот символ /\\./ \n// // экранировать надо \\ ^ & | если их не экранировать то они будут давать свои фишки надо читать документацию\n\n// console.log('12-34-56'.replace(/-/g, ':'));// заменить все дефисы на двоеточия\n\n//методы которые относятся к регулярным выражениям\n// const ans = prompt('Введите хоть что то');\n\n// const reg = /n/ig;\n// console.log(reg.test(ans));// вернет либо true либо false в зависимости от того найдет ли он паттерн в строке или нет\n\n\n// //классы в регулярных выражениях\n// // \\d - diggits ищем цифры\n// // \\w - words ищем все слова. Все буквы\n// // \\s - spaces ищем все пробелы\n\n// //const reg = / /ig;// можно искать пробел\n\n\n// const ans = prompt('Введите число');\n\n// const reg = /\\d/g;\n// console.log(ans.match(reg));//ищем все цифры в строке\n\n// const str =\"My name is R2D2\";\n\n// console.log(str.match(/\\w\\d\\w\\d/i)); // ищем букву цифру букву цифру\n\n\n// // обратные классы\n// //  \\D все не числа\n// // \\W все не буквы\n\n\n// //теперь переделаем код для слайдера\n\n// next.addEventListener('click', () => {\n//     if (offset == +width.replace(/\\D/g, '') * (slides.length - 1)) {// вместо того чтобы делать slice заменяем все не числа на пустую строку (там роде 650px)\n//         offset = 0;\n//     } else {\n//         offset += +width.replace(/\\D/g, '');\n//     }\n// });\n\n\n// const string = '9 баб я выебал в 22 года'; \n\n// function strModifyer(str){\n//     str =  +str.replace(/\\D/g, '');\n//     return str;\n// }\n// console.log(strModifyer(string));// >>> 922\n\n\n\n//Урок 66 создаем калькулятор на сайте Часть1\n\n // Calculator\n\n\n // вначале проставили айдишники и атрибуты в HTML\n//  const result = document.querySelector('.calculating__result span');// получаем спан результата\n//  let sex = 'female',// задаем переменные для формулы баба и ратио стоят по умолчанию\n//      height, weight, age,\n//      ratio = 1.375;\n// // будет 2 функции. Одна будет брать инфу от кнопок другая из инпутов\n\n\n//  function calcTotal() {\n//      if (!sex || !height || !weight || !age || !ratio) {// если хоть что то не заполнено то рассчеты не ведутся\n//          result.textContent = '____'; // Можете придумать что угодно\n//          return;// это чтобы превать функцию. Если она увидит ретёрн то все дальнейшие действия продолжаться не будут \n//      }\n//      if (sex === 'female') {// если все данные заполнены то используются эти формулы из статьи\n//          result.textContent = Math.round((447.6 + (9.2 * weight) + (3.1 * height) - (4.3 * age)) * ratio);//это если баба\n//      } else {\n//          result.textContent = Math.round((88.36 + (13.4 * weight) + (4.8 * height) - (5.7 * age)) * ratio);//это если не баба\n//      }\n//  }\n\n//  calcTotal();\n// // эта функция будет получать инфу из дивов и записывать ее в переменнные\n//  function getStaticInformation(parentSelector, activeClass) { // эта функция написана с такими аргументами протому что она будет применена для двух блоков.Пола и выбора активности\n//      const elements = document.querySelectorAll(`${parentSelector} div`);//получаем элементы внутри блока который будет передан в функцию\n\n//      elements.forEach(elem => {//на каждый элемент внутри\n//          elem.addEventListener('click', (e) => {//вешаем обработчик событий.\n//             //делегирование тут не стали применять потому что там будет дрочь с подложкой.Если промахнуться то окрасится весь родительский див\n//              if (e.target.getAttribute('data-ratio')) {// получаем атрибут кликнутого элемента.Если он есть\n//                  ratio = +e.target.getAttribute('data-ratio');// записываем его в ратио\n//              } else {\n//                  sex = e.target.getAttribute('id');//если его нет то это значит что мы кликнули на пол и получаем айдишник записываем его во пол\n//              }\n \n//              elements.forEach(elem => {// при клике на любой элемент у всех убираем класс эктив\n//                  elem.classList.remove(activeClass);\n//              });\n \n//              e.target.classList.add(activeClass);// добавляем на тот который кликнули\n \n//              calcTotal();// вызываем калькулятор \n//          });\n//      });\n//  }\n// // запускаем на 2 блока\n//  getStaticInformation('#gender', 'calculating__choose-item_active');\n//  getStaticInformation('.calculating__choose_big', 'calculating__choose-item_active');\n// // теперь функция которая обрабатывает инпуты\n\n//  function getDynamicInformation(selector) {\n//      const input = document.querySelector(selector);// получаем инпут по селектору который передается через аргумент\n\n//      input.addEventListener('input', () => {// на инпут вешаем обработчик который реагирует на любое изменение значения внутри\n//          switch(input.getAttribute('id')) {// получаем айдишник инпута и проверяем его\n//              case \"height\"://если это рост то его записываем в переменную\n//                  height = +input.value;\n//                  break;// дальше функцию останавливаем\n//              case \"weight\":// если вес то в вес записываем\n//                  weight = +input.value;\n//                  break;\n//              case \"age\":// если возраст то в возраст\n//                  age = +input.value;\n//                  break;\n//          }\n\n//          calcTotal();// опять врубаем калькулятор\n//      });\n//  }\n// // запускаем функцию для каждого инпута\n//  getDynamicInformation('#height');\n//  getDynamicInformation('#weight');\n//  getDynamicInformation('#age');\n\n\n\n\n\n//Урок 67 Калькулятор часть 2\n\n\n// Calculator\n\n\n// const result = document.querySelector('.calculating__result span');\n    \n// let sex, height, weight, age, ratio;\n\n// // тут переменная не сразу жестко устанавливется а сначала проверяется в хранилище\n// if (localStorage.getItem('sex')) {\n//     sex = localStorage.getItem('sex');\n// } else {\n//     sex = 'female';\n//     localStorage.setItem('sex', 'female');\n// }\n\n// if (localStorage.getItem('ratio')) {\n//     ratio = localStorage.getItem('ratio');\n// } else {\n//     ratio = 1.375;\n//     localStorage.setItem('ratio', 1.375);\n// }\n\n// function calcTotal() {\n//     if (!sex || !height || !weight || !age || !ratio) {\n//         result.textContent = '____';\n//         return;\n//     }\n//     if (sex === 'female') {\n//         result.textContent = Math.round((447.6 + (9.2 * weight) + (3.1 * height) - (4.3 * age)) * ratio);\n//     } else {\n//         result.textContent = Math.round((88.36 + (13.4 * weight) + (4.8 * height) - (5.7 * age)) * ratio);\n//     }\n// }\n\n// calcTotal();\n\n\n// //Ставим классы активности на нужные кнопки\n// function initLocalSettings(selector, activeClass) {\n//     const elements = document.querySelectorAll(selector);\n\n//     elements.forEach(elem => {\n//         elem.classList.remove(activeClass);//ну а эта функция убирает класс эктив у всех элементов\n//         if (elem.getAttribute('id') === localStorage.getItem('sex')) {// проверяет айди на соответствие с хранилищем\n//             elem.classList.add(activeClass);\n//         }\n//         if (elem.getAttribute('data-ratio') === localStorage.getItem('ratio')) {//та же проверка на соответствие с атрибутом\n//             elem.classList.add(activeClass);\n//         }\n//     });\n// }\n// //вызов этой функции 2 раза\n// initLocalSettings('#gender div', 'calculating__choose-item_active');\n// initLocalSettings('.calculating__choose_big div', 'calculating__choose-item_active');\n\n// // тут делаем так чтобы кнопки запоминались в localStorage\n\n// function getStaticInformation(selector, activeClass) {\n//     const elements = document.querySelectorAll(selector);\n\n//     elements.forEach(elem => {\n//         elem.addEventListener('click', (e) => {\n//             if (e.target.getAttribute('data-ratio')) {\n//                 ratio = +e.target.getAttribute('data-ratio');\n//                 localStorage.setItem('ratio', +e.target.getAttribute('data-ratio'));//вот тут сохранаем ратио в сет айтем из атриута HTML\n//             } else {\n//                 sex = e.target.getAttribute('id');\n//                 localStorage.setItem('sex', e.target.getAttribute('id'));// если ратио нет в HTML то сохраняем айдишник\n//             }\n\n//             elements.forEach(elem => {\n//                 elem.classList.remove(activeClass);\n//             });\n\n//             e.target.classList.add(activeClass);\n\n//             calcTotal();\n//         });\n//     });\n// }\n\n// getStaticInformation('#gender div', 'calculating__choose-item_active');\n// getStaticInformation('.calculating__choose_big div', 'calculating__choose-item_active');\n\n\n// //если строка пытается трансформироваться то она преваращается в NaN\n// //NaN в логическом контексте фолс поэтому когда мы в инпут пишем буквы ты срабатывает прочерк\n// // если юзер вводит какую то лажу сделаем так чтобы инпут подсвечивался красным\n// function getDynamicInformation(selector) {\n//     const input = document.querySelector(selector);\n\n//     input.addEventListener('input', () => {\n//         if (input.value.match(/\\D/g)) {//пытаемся найти все не числа в инпуте\n//             input.style.border = \"1px solid red\";//если нашли то красим бордер инпута\n//         } else {\n//             input.style.border = 'none';//если исправил то убирается красная обводка\n//         }\n//         switch(input.getAttribute('id')) {\n//             case \"height\":\n//                 height = +input.value;\n//                 break;\n//             case \"weight\":\n//                 weight = +input.value;\n//                 break;\n//             case \"age\":\n//                 age = +input.value;\n//                 break;\n//         }\n\n//         calcTotal();\n//     });\n// }\n\n// getDynamicInformation('#height');\n// getDynamicInformation('#weight');\n// getDynamicInformation('#age');\n\n\n\n\n\n\n\n//Урок 68.Геттеры и сетеры(свойства объектов)\n\n// Объекты состоят из свойств и методов\n//Есть еще свойства - данные. и свойства - акцессоры\n\n// const persone = {\n//     name:'Alex',\n//     age: 25,\n\n//     get userAge() {// короче вот эта херня это свойство = акцессор. Выдает возраст этого объекта\n//         return this.age;\n//     },\n\n//     set userAge(num) {//задаются они парно.Тут дта херня делает такчто приссваивает значение для этого объекта\n//         this.age = num;\n//     }\n// }\n\n// //get и set это ключевые слова - подсвечиваются сиреневым\n\n// console.log(persone.userAge);// вызывается как свойство а задается как функция\n// console.log(persone.userAge = 30);// можно получать а можно присваивать.Но ключевое слово писать не нужно он сам понимает что нужно сделать\n\n\n// //ну эти штуки нужны чтобы вытаскивать и преобразовывать информацию точечно и не писать выборку каждый раз \n// //при планировании сложного функционала\n\n\n\n\n// // Урок 69 Инкапсуляция\n\n// //Инкапсуляция - это один из принципов ООП\n\n// //Чтобы программу не сломали, ее внутренности скрываются.А мы используем лишь ее результат\n\n// function User(name, age) {// делаем функцию - конструктор\n//     this.name = name;\n//     this.age = age;\n\n//     this.say = function(){// делаем метод \n//         console.log(`Имя пользователя: ${this.name}, возраст ${this.age}`);\n//     };\n// }\n\n// const ivan = new User('Ivan', 27);// используем конструктор\n\n// console.log(ivan.name);\n// console.log(ivan.age);\n\n// ivan.name = 'Alex';\n// ivan.age = 30;\n\n// ivan.say();\n// // все меняется все считывается\n\n// //Инкапсуляция\n// function User(name, age) {\n//     this.name = name;\n//     let userAge = age;// теперь это переменная а не контекст вызова\n\n//     this.say = function(){\n//         console.log(`Имя пользователя: ${this.name}, возраст ${userAge}`);\n//     };\n// }\n\n\n\n\n// const ivan = new User('Ivan', 27);\n\n// console.log(ivan.name);\n// console.log(ivan.userAge);//undefined\n\n// ivan.name = 'Alex';\n// ivan.age = 30;\n\n// ivan.say();//>>> Имя пользователя: Alex, возраст 27 \n// //Возраст нельзя поментять и даже получить\n\n\n\n// // теперь внутри объекта сделаем 2 метода\n// function User(name, age) {\n//     this.name = name;\n//     let userAge = age;// теперь это переменная а не контекст вызова\n\n//     this.say = function(){\n//         console.log(`Имя пользователя: ${this.name}, возраст ${userAge}`);\n//     };\n\n//     this.getAge = function(){\n//         return userAge;\n//     }\n\n//     this.setAge = function(age){//сюда можно добавить любые проверки\n//         if(typeof age === 'number' && age > 0 && age < 110){\n//             userAge = age;// и только тогда запишется\n//         }else {\n//             console.log('Недопустимое значение');\n//         }\n//     }\n// }\n\n\n\n\n// const ivan = new User('Ivan', 27);\n\n// console.log(ivan.name);\n// console.log(ivan.userAge);//undefined\n// console.log(ivan.getAge());//выдаст 27 \n\n// ivan.name = 'Alex';\n// ivan.age = 50;//нухуя не изменит\n// ivan.setAge(45);// а это изменит но через проверку\n\n// ivan.say();//>>> Имя пользователя: Alex, возраст 45\n\n\n\n\n\n// class User {\n//     constructor(name, age) {\n//         this.name = name;\n//        // let userAge = age; // такая запись не будет правильно отрабатывать \n//         //this.userAge// такое свойство станет публичным\n//         this._age = age;// такая фишка сделает его непубличным но оно будет работать в методах\n//     }\n\n\n//     say() {\n//         console.log(`Имя пользователя: ${this.name}, возраст ${this._age}`);\n//     }\n\n//     get age() {// переписываем как геттер\n//         return this._age;\n//     }\n\n//     set age(age) {//переписываем как сеттер\n//         if (typeof age === 'number' && age > 0 && age < 110) {\n//             this._age = age; \n//         }\n//         else {\n//             console.log('Недопустимое значение');\n//         }\n//     }\n// }\n\n\n// const ivan = new User('Ivan', 27);\n\n// console.log(ivan.name);\n// //ivan.userAge = 99;// тут возраст установится просто так. потому что с классами фишка с переменной вместо this не канает\n// console.log(ivan.age);// геттер\n// ivan.age = 90;// сеттер\n// console.log(ivan.age);// >>> 90\n// ivan.say();\n\n\n// если перед age поставить псевдопробел _age  то все геттеры и сеттеры обходятся стороной.И это хакбро)\n//классы пока что в этом плане дырявее чем функции конструкторы.Там переменная забронирована\n\n\n\n\n//есть экспериментальный синтаксис - поля классов\n// еще одна копия класса\n// class User {\n//     constructor(name, age) {\n//         this.name = name;\n//         this._age = age;\n//     }\n\n//     #surname = 'Koltakov';// пишем surname за пределами конструктора// эту херню нельзя получить или изменить без гетера или сетера или спец метода\n\n//     say = () => {//стрелочная функция чтобы не терять контексты. Это породу связано со свойствами then встрелочной функции(предыдущие уроки про then)\n//         console.log(`Имя пользователя: ${this.name}${this.#surname}, возраст ${this._age}`);// тут можно использовать\n//     }\n\n//     get age() {\n//         return this._age;\n//     }\n\n//     set age(age) {\n//         if (typeof age === 'number' && age > 0 && age < 110) {\n//             this._age = age; \n//         }\n//         else {\n//             console.log('Недопустимое значение');\n//         }\n//     }\n// }\n\n\n// const ivan = new User('Ivan', 27);\n\n// console.log(ivan.surname);//обращаемся к свойству но без решетки получаем undefined\n// console.log(ivan.#surname);// получим ошибку\n// ivan.say();\n\n\n\n\n\n\n//Урок 70.Прием \"модуль\" зачем и как его использовать\n\n//модуль используется для того чтобы скрыть  внутренние детали реализации скрипта\n\n// модули самодостаточны и независимы\n// обеспечивают чистоту глобального пространства\n// допустим есть библиотека подключенная кнашему скрипту\n//в нем есть глобальная переменная add. Мы этого не знаем\n//  создаем такую же переменную add в своем скрипте и получаем ошибку \n\n\n\n// const number = 1; // переменная в глобальной области \n\n// (function () {// это анонимная самовызывающаяся функция сосвоей областьювидимости\n//     const number = 2;\n//     console.log(number);//>>> 2\n//     console.log(number + 3);//>>> 5\n// }());\n\n// console.log(number);//>>>1\n\n// // так это вроде замкание \n\n\n// //использоваие объектного интерфейса\n// //мы модуль(анонимную самовызывающуюся функцию) записываем в переменную и в эту переменну возвращаем методы доступные снаружи\n// const user = (function(){\n//     const privat = function (){\n//         console.log('I am privat');\n//     };\n//     return {// возвращем в user объект в котором есть метод\n//         sayHello: privat\n//     };\n// }());\n\n// user.sayHello();\n\n\n//Урок 71 Webpack.Собираем наш проект\n\n//commonJS- этоспособ экспротрировать и импротировать функции между файлами\n// в видосе расписано как устанавливать и пользоваться этим npm\n// тут я не смогу все описать \n//есть инфа в папке src\n\n//короче есть файл webpack.config.js\n// 'use strict';\n\n// let path = require('path');\n\n// module.exports = {\n//   mode: 'development',//режим в котором работает вебппак.Есть developement и production\n//   entry: './js/script.js',// тот файл с которого будем начинать. Поумолчанию индекс.js\n//   output: {//конфигурируем точто получится в итоге\n//     filename: 'bundle.js',//имя файла\n//     path: __dirname + '/dist/js'//путь куда сохранять\n//   },\n//   watch: true,// если тру то он автоматически будет пресохранять и пересобирать при изменении\n\n//   devtool: \"source-map\",// // хранит информацию об исходниках из которых собирался проект\n\n//   module: {}////непонятнаааааа\n// };\n\n\n\n// итакю.Есть глобально установленный вебпак\n// есть настроенный конфиг\n// теперь надо большой файл разбить намаленькие кусочки \n\n\n// создали папку modules и прокрошили тудавесь проект обернули в функцию и экспортировали\n\n// тут оставляем толко это \n// через синтаксис commonJS импротируем каждую функцию из modules\n//следим чтобы совпадали названия\n// window.addEventListener('DOMContentLoaded', function() {\n//     const tabs = require('./modules/tabs'),\n//           modal = require('./modules/modal'),\n//           timer = require('./modules/timer'),\n//           cards = require('./modules/cards'),\n//           calc = require('./modules/calc'),\n//           forms = require('./modules/forms'),\n//           slider = require('./modules/slider');\n// //вызываем каждую функцию\n//     tabs();\n//     modal();\n//     timer();\n//     cards();\n//     calc();\n//     forms();\n//     slider();\n// });\n\n//итак я пересобрал проект все скрипты работают кроме openModal потому что там идет зависимость\n\n\n\n\n//Урок 72 ES 6 modules \n//еще один способ формировать модули\n\n// в папке test разбираю способы импрота и экспорта\n\n//итак есть main.js из которого экспортируется\n// export let one = 1;//первый синтаксис\n\n// let two = 2;\n\n// export {two};// второй синтаксис\n\n// export function sayHi (){\n//     console.log('Hello');\n// }\n\n// export default function sayHi (){//написали дефолт дальше смотрим как импортируется\n//     console.log('Hello');\n// }\n// // экспорт по умолчанию должен быть только один\n\n//есть script.js в котором это все испортируется\n\n// import {one as first, two} from './main';// as это преименование при импорте\n// //импортируется объект и деструктурируется \n// import sayHi from \"./main\"; // импорт если написан дефолт\n\n// console.log(`${first} and ${two}` );\n\n\n// import * as data from './main';//импортировать все как объект data\n\n// console.log(`${data.one} and ${data.sayHi} `);\n\n\n// sayHi();//вызываем импортированную функцию\n\n\n// включается вебпак \n// и рабочим файлом становится bundle.js(его и привязываем к HTML)\n\n\n//есть атрибут type = \"module\" в HTML он делает так чтобы браузер попытался прочитать их без вебпака\n// но в импртах и экспортах надо писать уже путь с типом файла\n\n\n\n\n//Урок 73 Собираем проект и фиксим баги \n//Это самый сложный урок на данный момент\n\n//В 71 уроке был вот такой синтаксис\n\n//чтобы все правильно отрабатывало должно быть запущено MAMP JSON Server и WebPack\n\n// window.addEventListener('DOMContentLoaded', function() {\n//     const tabs = require('./modules/tabs'),\n//           modal = require('./modules/modal'),\n//           timer = require('./modules/timer'),\n//           cards = require('./modules/cards'),\n//           calc = require('./modules/calc'),\n//           forms = require('./modules/forms'),\n//           slider = require('./modules/slider');\n// //вызываем каждую функцию\n//     tabs();\n//     modal();\n//     timer();\n//     cards();\n//     calc();\n//     forms();\n//     slider();\n// })\n\n\n//теперь вот такой синтаксис импорта ES6\n\nimport tabs from './modules/tabs';\nimport modal from './modules/modal';\nimport timer from './modules/timer';\nimport cards from './modules/cards';\nimport calc from './modules/calc';\nimport forms from './modules/forms';\nimport slider from './modules/slider';\nimport {openModal} from './modules/modal'\nwindow.addEventListener('DOMContentLoaded', function() {\n    const modalTimerId = setTimeout( () => openModal('modal', modalTimerId), 300000);// тут стрелочная функция сделана чтобы можно было передать аргументы в опен модал а не просто написать openModal без скобочек.Наебываем сет таймаут как с обработчиком событий\n    //если простыми словами то через 30000 милисекунд запустится стрелочная функция которая внутри себя запустит openModal\n// эту херню надо будет передавать в forms и modal модули \n\n//вызываем каждую функцию\n    tabs('.tabheader__item', '.tabcontent', '.tabheader__items', 'tabheader__item_active');\n    modal('[data-modal]','.modal', modalTimerId);// тут через аргументы делаем чтобы избежать багов\n    timer('.timer', \"2020-10-04\");\n    cards();\n    calc();\n    forms('form', modalTimerId);\n    slider({// тут передаем все аргументы слайдера через деструктуризацию\n        container: '.offer__slider',\n        nextArrow: '.offer__slider-next',\n        slide: '.offer__slide',\n        prevArrow: '.offer__slider-prev',\n        totalCounter: '#total',\n        currentCounter:'#current',\n        wrapper: '.offer__slider-wrapper',\n        field: '.offer__slider-inner',\n\n    });\n});\n\n\n//в этом уроке прыгаем по папке modules и фиксим баги\n//весь прикол в том что модулидолжны быть независимы друг от друга и нужно стараться не использовать жестко забитых переменных в функциях а передавать их в аргументах\n\n\n// так сам я однозначно не вывезу такое дерьмо с таймером \n// чтобы такого  не было надо писать независимые друг от друга модули и не использовать глобальные переменные\n//ну если вкратце тонам надо было отключать показ модального окна если пользователь уже его кликнул\n// в целиковом файле были одни переменные и использовались они в разных модулях \n// тут было сделано так чтобы эта переменная(setTimerID) передавалась от главного script.js файла и использоавлась внутри функций как аргумент \n\n\n// еще мы вырезали функции которые работают с сервером и занесли их в services\n\n// в слайдере тоже все сделали через деструктуризацию\n\n\n\n//Урок 74 Формируем портфолио на GitHub\n\n// Гитхаб это соцсеть. Там можно создавать портфолио заливать отдельные модули с описаниями \n//короче надо разобраться с гитом и пересмотреть предыдущий урок ","const postData = async (url, data) => {\r\n    let res = await fetch(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: data\r\n    });\r\n\r\n    return await res.json();\r\n};\r\n\r\nasync function getResource(url) {\r\n    let res = await fetch(url);\r\n\r\n    if (!res.ok) {\r\n        throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n    }\r\n\r\n    return await res.json();\r\n}\r\n\r\nexport {postData};\r\nexport {getResource};"],"sourceRoot":""}